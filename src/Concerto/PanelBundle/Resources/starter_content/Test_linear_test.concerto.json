{
    "version": "5.0.beta.5.3",
    "collection": [
        {
            "class_name": "Test",
            "id": 4,
            "name": "source_linear_test",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "if(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  print(ib)\n  if(ib$table_type == \"custom\") {\n    data_set_id = ib$data_set_id\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    trait_column = ib$custom_table$columns$trait\n    order_column = ib$custom_table$columns$order_index\n    data_set_id_column = ib$custom_table$columns$data_set_id\n\n    questions = concerto.table.query(\"SELECT id, {{question_column}} AS question, {{response_options_column}} AS response_options, {{trait_column}} AS trait FROM {{table}} WHERE {{data_set_id_column}} = '{{data_set_id}}' ORDER BY {{order_column}} ASC\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      trait_column=trait_column,\n      order_column=order_column,\n      table=table,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id))\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  print(questions)\n\n  return(questions)\n}\n\ngetContent = function(question, current_item, answers) {\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  options = NULL\n  response_classes = \"\"\n  response_styles = \"\"\n  if(o$response_type == \"multiple_choice\") {\n    #response options\n    if(randomized_response_options == \"1\") {\n      options = o$response_options[sample(1:length(o$response_options))]\n    } else {\n      options = o$response_options\n    }\n    for(i in 1:length(options)) {\n      options[[i]]$points = NULL\n    }\n    \n    response_classes = \"linear-test-response-section-vertical\"\n    response_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      response_classes = \"linear-test-response-section-horizontal\" \n      response_styles = paste0(\"width: \",response_width)\n    }\n  }\n  \n  content = concerto.template.join(templateId=linear_test_template,params=list(\n    paragraph = paragraph,\n    question = question$question,\n    response_type = o$response_type,\n    response_options = toJSON(options),\n    answers = toJSON(answers),\n    current_item = current_item,\n    response_classes = response_classes,\n    response_styles = response_styles\n  ))\n\n  return(content)\n}\n\nshouldStop = function(response, answers, questions, current_item, next_item) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n\n  if((sr_count$enabled == \"1\" && current_item >= as.numeric(sr_count$count)) || next_item > dim(questions)[1]) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, correct, scores, correctness, current_item) {\n  if(is.null(response$response)) { return(scores) }\n\n  table = \"default_linear_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  trait_column = \"trait\"\n  data_set_id_column = \"data_set_id\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    correct_column = rb$custom_table$columns$correct\n    trait_column = rb$custom_table$columns$trait\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  r = concerto.table.query(\"SELECT id FROM {{table}} WHERE {{item_id_column}}={{item_id}} AND {{session_id_column}}='{{session_id}}' AND {{data_set_id_column}}='{{data_set_id}}'\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    data_set_id_column=data_set_id_column,\n    data_set_id=dbEscapeStrings(concerto$connection, toString(rb$data_set_id))\n  ))\n  if(dim(r)[1] > 0) { \n    rid = r[1,\"id\"]\n    concerto.table.query(\"UPDATE {{table}} SET {{response_column}}='{{response}}', {{time_taken_column}}={{time_taken}}, {{correct_column}}={{correct}} WHERE id={{id}}\", list(\n      table=table,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      id=rid\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{correct_column}}, {{trait_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{correct}}, '{{trait}}', '{{data_set_id}}')\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(rb$data_set_id))\n    ))\n  }\n\n  if(is.null(scores[[question$trait]])) {\n    scores[[question$trait]] = 0\n  }\n\n  if(!is.null(correctness[current_item]) && !is.na(correctness[current_item])) { \n    prev_correct = correctness[current_item] \n    scores[[question$trait]] = scores[[question$trait]] - prev_correct\n  }\n\n  scores[[question$trait]] = scores[[question$trait]] + correct\n  return(scores)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = concerto.template.join(templateId=item_debug_template,params=list(id=question$id))\n  content = paste0(debug, content)\n  return(content)\n}\n\n#calculate score based on response (e.g. correct\/incorrect, or differing number of points depending on choice)\ncalculateScore = function(response, question) { \n  print(\"calculateScore()\")\n  if (is.character(question$response_options)) {\n    o = fromJSON(question$response_options)\n  }\n\n  if (o$response_type == \"open_text\") {\n    print(\"open text item\")\n    if(response$response == o$correct_answer) { #open text response just needs to match database correct answer\n      print(\"correct\")\n      return(1)\n    } else {\n      print(\"incorrect\")\n      return(0)\n    }\n  } else if (o$response_type == \"multiple_choice\") { #make it go through all the responses, see which one they matched with, and then give them points for the match.\n    print(\"multiple choice item\")\n\n    options = NULL #turn response options into a nice table rather than a list.\n    for(i in 1:length(o$response_options)) {\n      options = rbind(options, as.list(o$response_options[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {  \n      if (options[i,]$value == response$response) { #user chose this response option\n        print(\"response led to this many points:\")\n        print(options[i,]$points)\n        return(as.numeric(options[i,]$points)) #so they get this many points\n      }\n    }\n    print(\"Warning: User's response did not match any of the options in the item bank. They have been given 0 points for this response.\")\n    return(0) #no match, so no points\n  } \n  return(F)\n}\n\nupdateSavedState = function(questions, answers, time_limit, scores, correctness, current_item){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$linear_test)) {\n    concerto$promoted$.savedState$linear_test <<- list()\n  }\n  \n  concerto$promoted$.savedState$linear_test$questions <<- questions\n  concerto$promoted$.savedState$linear_test$answers <<- answers\n  concerto$promoted$.savedState$linear_test$time_limit <<- time_limit\n  concerto$promoted$.savedState$linear_test$scores <<- scores\n  concerto$promoted$.savedState$linear_test$correctness <<- correctness\n  concerto$promoted$.savedState$linear_test$current_item <<- current_item\n}\n\nsr_time = fromJSON(stopping_time)\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$linear_test)) {\n  questions = concerto$promoted$.savedState$linear_test$questions\n  answers = concerto$promoted$.savedState$linear_test$answers\n  time_limit = concerto$promoted$.savedState$linear_test$time_limit\n  scores = concerto$promoted$.savedState$linear_test$scores\n  correctness = concerto$promoted$.savedState$linear_test$correctness\n  current_item = concerto$promoted$.savedState$linear_test$current_item\n} else {\n  questions = getQuestions()\n  answers = NULL\n  time_limit = 0\n  if(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { \n    time_limit = as.numeric(sr_time$time_limit) \n  }\n  scores = list()\n  correctness = NULL\n  current_item = 1\n}\n\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\ntimer_set = FALSE\nif(time_limit > 0) { timer_set = TRUE }\nmax_items = dim(questions)[1]\nsr_item_count = fromJSON(stopping_item_count)\nif(sr_item_count$enabled == \"1\") { max_items = min(max_items, as.numeric(sr_item_count$count)) }\n\nwhile(T) {\n  show_previous = \"false\"\n  if(current_item > 1 && can_go_back == \"1\" && item_debug == \"0\") { show_previous = \"true\" }\n  show_pager = \"false\"\n  if(dim(questions)[1] > 1 && item_debug == \"0\") { show_pager = \"true\" }\n  show_next = \"false\"\n  if(current_item <= dim(questions)[1] || item_debug == \"1\") { show_next = \"true\" }\n  buttons = concerto.template.join(templateId=buttons_template, params=list(\n    show_previous=show_previous,\n    show_pager=show_pager,\n    show_next=show_next,\n    current_item=current_item,\n    max_items=max_items,\n    label_previous=previous_button_label,\n    label_next=next_button_label\n  ))\n\n  question = questions[current_item,]\n  content = getContent(question, current_item, answers)\n\n  if(item_debug == \"0\") {\n    updateSavedState(questions, answers, time_limit, scores, correctness, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = \"\"\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n\n    if(!is.null(response$response) || response$isTimeout == \"1\") {\n      correct = 0\n      if(is.null(response$response)) { response$response = \"\" }\n      correct = calculateScore(response, question)\n\n      scores = saveResponse(response, question, rb, correct, scores, correctness, current_item)\n      if(length(answers) < current_item) {\n        answers = c(answers, response$response)\n        correctness = c(correctness, correct)\n      } else {\n        answers[current_item] = response$response\n        correctness[current_item] = correct\n      }\n    }\n\n    prev_item = current_item\n    if(response$buttonPressed == \"next\" || response$isTimeout == \"1\") {\n      if(response_required == \"0\" || (!is.null(response$response) && response$response != \"\") || response$isTimeout == \"1\") {\n        current_item = current_item + 1\n        if(timer_set && sr_time$type == \"item\"){\n          time_limit = as.numeric(sr_time$time_limit) \n        }\n      } else {\n        warning_msg = no_response_alert\n      }\n    }\n    if(response$buttonPressed == \"previous\") {\n      current_item = current_item - 1\n      if(timer_set && sr_time$type == \"item\"){\n        time_limit = as.numeric(sr_time$time_limit) \n      }\n    }\n\n    if(shouldStop(response, answers, questions, prev_item, current_item)) {\n      if(response$isTimeout == \"1\") {\n        .branch = \"out_of_time\"\n      }\n      break\n    }\n  } else {\n    content = getDebugContent(content, question)\n    updateSavedState(questions, answers, time_limit, scores, correctness, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nrm(questions)\nconcerto$promoted$.savedState$linear_test <<- NULL",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 45,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 46,
                    "name": "paragraph",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 47,
                    "name": "next_button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 48,
                    "name": "previous_button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 49,
                    "name": "item_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 50,
                    "name": "response_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 51,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 52,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 53,
                    "name": "randomized_response_options",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 54,
                    "name": "order",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 55,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 56,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 57,
                    "name": "response_required",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 58,
                    "name": "no_response_alert",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 59,
                    "name": "scores",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 60,
                    "name": "can_go_back",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 61,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p><span style=\"line-height: 20.8px;\">1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/span><\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 62,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 63,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 64,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 65,
                    "name": "responses_layout",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 66,
                    "name": "response_width",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 67,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 68,
                    "name": "linear_test_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 69,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 70,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "2777d30258699025f850933a3383554064b9fc6c"
        },
        {
            "class_name": "TestWizard",
            "id": 2,
            "name": "linear_test",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "steps": [
                {
                    "class_name": "TestWizardStep",
                    "id": 2,
                    "title": "Presentation",
                    "description": "<p>Linear test presentation<\/p>\n",
                    "orderNum": 0,
                    "colsNum": 0,
                    "wizard": 2,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 2,
                            "label": "Paragraph",
                            "description": "",
                            "hideCondition": "",
                            "type": 2,
                            "passableThroughUrl": "0",
                            "value": "<p>Please answer question below:<\/p>\n",
                            "testVariable": 46,
                            "name": "paragraph",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 2,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "<p>Please answer question below:<\/p>\n"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 3,
                            "label": "Title",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "DEMO TEST",
                            "testVariable": 63,
                            "name": "title",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 1,
                            "wizard": 2,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "DEMO TEST"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 4,
                            "label": "Responses layout",
                            "description": "",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "vertical",
                            "testVariable": 65,
                            "name": "responses_layout",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 3,
                            "wizard": 2,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "horizontal",
                                        "label": "Horizontal",
                                        "order": 0
                                    },
                                    {
                                        "value": "vertical",
                                        "label": "Vertical",
                                        "order": 1
                                    }
                                ],
                                "defvalue": "vertical"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 5,
                            "label": "Response width",
                            "description": "<p>Can be any valid CSS width property value. E.g.:&nbsp;<strong>200px<\/strong>,&nbsp;<strong>20%<\/strong>.<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "",
                            "testVariable": 66,
                            "name": "response_width",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 4,
                            "wizard": 2,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 6,
                            "label": "Next button label",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "next",
                            "testVariable": 47,
                            "name": "next_button_label",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 5,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "next"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 7,
                            "label": "Previous button label",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "previous",
                            "testVariable": 48,
                            "name": "previous_button_label",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 6,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "previous"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 8,
                            "label": "Linear test template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "linear_test_content",
                            "testVariable": 68,
                            "name": "linear_test_template",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 0,
                            "wizard": 2,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "linear_test_content"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 9,
                            "label": "Item debug template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "test_item_debug",
                            "testVariable": 69,
                            "name": "item_debug_template",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 0,
                            "wizard": 2,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "test_item_debug"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 10,
                            "label": "Buttons template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "buttons_linear_test",
                            "testVariable": 70,
                            "name": "buttons_template",
                            "wizardStep": 2,
                            "stepTitle": "Presentation",
                            "order": 4,
                            "wizard": 2,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "buttons_linear_test"
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 3,
                    "title": "Items and navigation",
                    "description": "<p>Item bank definition<\/p>\n",
                    "orderNum": 1,
                    "colsNum": 0,
                    "wizard": 2,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 11,
                            "label": "Order",
                            "description": "",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "manual",
                            "testVariable": 54,
                            "name": "order",
                            "wizardStep": 3,
                            "stepTitle": "Items and navigation",
                            "order": 1,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "options": [
                                    {
                                        "value": "manual",
                                        "label": "manual"
                                    },
                                    {
                                        "value": "random",
                                        "label": "random"
                                    }
                                ],
                                "defvalue": "manual"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 12,
                            "label": "Item bank",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"direct\",\"direct_table\":[],\"custom_table\":[],\"data_set_id\":\"\"}",
                            "testVariable": 49,
                            "name": "item_bank",
                            "wizardStep": 3,
                            "stepTitle": "Items and navigation",
                            "order": 0,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "3",
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "placeholder": "0",
                                            "options": [
                                                {
                                                    "value": "direct",
                                                    "label": "direct"
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom"
                                                }
                                            ],
                                            "defvalue": "direct"
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 10,
                                        "name": "direct_table",
                                        "label": "Table",
                                        "definition": {
                                            "placeholder": "0",
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "placeholder": "0",
                                                    "fields": [
                                                        {
                                                            "type": "0",
                                                            "name": "id",
                                                            "label": "Id",
                                                            "definition": {
                                                                "placeholder": "0"
                                                            }
                                                        },
                                                        {
                                                            "type": "2",
                                                            "name": "question",
                                                            "label": "Question",
                                                            "definition": {
                                                                "placeholder": "0"
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "order_index",
                                                            "label": "Order",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 9,
                                                            "name": "response_options",
                                                            "label": "Response options",
                                                            "definition": {
                                                                "placeholder": 0,
                                                                "element": {
                                                                    "type": 9,
                                                                    "definition": {
                                                                        "placeholder": 0,
                                                                        "fields": [
                                                                            {
                                                                                "type": 3,
                                                                                "name": "response_type",
                                                                                "label": "Response Type",
                                                                                "definition": {
                                                                                    "placeholder": 0,
                                                                                    "options": [
                                                                                        {
                                                                                            "value": "open_text",
                                                                                            "label": "Open text",
                                                                                            "order": 2
                                                                                        },
                                                                                        {
                                                                                            "value": "multiple_choice",
                                                                                            "label": "Multiple choice",
                                                                                            "order": 1
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "order": 0
                                                                            },
                                                                            {
                                                                                "type": 0,
                                                                                "name": "correct_answer",
                                                                                "label": "Correct Answer",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                },
                                                                                "hideCondition": "parent.type != \"open_text\"",
                                                                                "order": 1
                                                                            },
                                                                            {
                                                                                "type": 9,
                                                                                "name": "response_options",
                                                                                "label": "Response Options",
                                                                                "definition": {
                                                                                    "placeholder": 0,
                                                                                    "fields": [
                                                                                        {
                                                                                            "type": 0,
                                                                                            "name": "name",
                                                                                            "label": "Name",
                                                                                            "definition": {
                                                                                                "placeholder": 0
                                                                                            },
                                                                                            "order": 0
                                                                                        },
                                                                                        {
                                                                                            "type": 0,
                                                                                            "name": "label",
                                                                                            "label": "Label",
                                                                                            "definition": {
                                                                                                "placeholder": 0
                                                                                            },
                                                                                            "order": 1
                                                                                        },
                                                                                        {
                                                                                            "type": 0,
                                                                                            "name": "score",
                                                                                            "label": "Score",
                                                                                            "definition": {
                                                                                                "placeholder": 0
                                                                                            },
                                                                                            "order": 2
                                                                                        }
                                                                                    ]
                                                                                },
                                                                                "order": 2,
                                                                                "hideCondition": "parent.type != \"multiple_choice\""
                                                                            }
                                                                        ]
                                                                    }
                                                                },
                                                                "fields": [
                                                                    {
                                                                        "type": 3,
                                                                        "name": "response_type",
                                                                        "label": "Response type",
                                                                        "definition": {
                                                                            "placeholder": 0,
                                                                            "options": [
                                                                                {
                                                                                    "value": "multiple_choice",
                                                                                    "label": "Multiple choice",
                                                                                    "order": 0
                                                                                },
                                                                                {
                                                                                    "value": "open_text",
                                                                                    "label": "Open text",
                                                                                    "order": 1
                                                                                }
                                                                            ]
                                                                        },
                                                                        "order": 0
                                                                    },
                                                                    {
                                                                        "type": 0,
                                                                        "name": "correct_answer",
                                                                        "label": "Correct answer",
                                                                        "definition": {
                                                                            "placeholder": 0
                                                                        },
                                                                        "order": 1,
                                                                        "hideCondition": "parent.response_type != \"open_text\""
                                                                    },
                                                                    {
                                                                        "type": 10,
                                                                        "name": "response_options",
                                                                        "label": "Response options",
                                                                        "definition": {
                                                                            "placeholder": 0,
                                                                            "fields": [
                                                                                {
                                                                                    "type": 0,
                                                                                    "name": "name",
                                                                                    "label": "Name",
                                                                                    "definition": {
                                                                                        "placeholder": 0
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": 0,
                                                                                    "name": "label",
                                                                                    "label": "Label",
                                                                                    "definition": {
                                                                                        "placeholder": 0
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "type": 0,
                                                                                    "name": "score",
                                                                                    "label": "Score",
                                                                                    "definition": {
                                                                                        "placeholder": 0
                                                                                    }
                                                                                }
                                                                            ],
                                                                            "element": {
                                                                                "type": 9,
                                                                                "definition": {
                                                                                    "placeholder": 0,
                                                                                    "fields": [
                                                                                        {
                                                                                            "type": 0,
                                                                                            "name": "value",
                                                                                            "label": "Value",
                                                                                            "definition": {
                                                                                                "placeholder": 0
                                                                                            },
                                                                                            "order": 0
                                                                                        },
                                                                                        {
                                                                                            "type": 2,
                                                                                            "name": "label",
                                                                                            "label": "Label",
                                                                                            "definition": {
                                                                                                "placeholder": 0
                                                                                            },
                                                                                            "order": 1
                                                                                        },
                                                                                        {
                                                                                            "type": 0,
                                                                                            "name": "points",
                                                                                            "label": "Points",
                                                                                            "definition": {
                                                                                                "placeholder": 0
                                                                                            },
                                                                                            "order": 2
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        "order": 2,
                                                                        "hideCondition": "parent.response_type != \"multiple_choice\""
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        {
                                                            "type": "0",
                                                            "name": "trait",
                                                            "label": "Trait",
                                                            "definition": {
                                                                "placeholder": "0"
                                                            }
                                                        }
                                                    ]
                                                }
                                            },
                                            "fields": [
                                                {
                                                    "type": 3,
                                                    "name": "response_type",
                                                    "label": "Response Type",
                                                    "definition": {
                                                        "placeholder": 0,
                                                        "options": [
                                                            {
                                                                "value": "open_text",
                                                                "label": "Open text",
                                                                "order": 2
                                                            },
                                                            {
                                                                "value": "multiple_choice",
                                                                "label": "Multiple choice",
                                                                "order": 1
                                                            }
                                                        ]
                                                    },
                                                    "order": 0
                                                },
                                                {
                                                    "type": 0,
                                                    "name": "correct_answer",
                                                    "label": "Correct Answer",
                                                    "definition": {
                                                        "placeholder": 0
                                                    },
                                                    "hideCondition": "parent.type != \"open_text\"",
                                                    "order": 1
                                                },
                                                {
                                                    "type": 9,
                                                    "name": "response_options",
                                                    "label": "Response Options",
                                                    "definition": {
                                                        "placeholder": 0,
                                                        "fields": [
                                                            {
                                                                "type": 0,
                                                                "name": "name",
                                                                "label": "Name",
                                                                "definition": {
                                                                    "placeholder": 0
                                                                },
                                                                "order": 0
                                                            },
                                                            {
                                                                "type": 0,
                                                                "name": "label",
                                                                "label": "Label",
                                                                "definition": {
                                                                    "placeholder": 0
                                                                },
                                                                "order": 1
                                                            },
                                                            {
                                                                "type": 0,
                                                                "name": "points",
                                                                "label": "Points",
                                                                "definition": {
                                                                    "placeholder": 0
                                                                },
                                                                "order": 2
                                                            }
                                                        ]
                                                    },
                                                    "order": 2,
                                                    "hideCondition": "parent.type != \"multiple_choice\""
                                                }
                                            ]
                                        },
                                        "hideCondition": "parent.table_type != \"direct\"",
                                        "order": 2
                                    },
                                    {
                                        "type": 12,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "definition": {
                                            "placeholder": "0",
                                            "cols": [
                                                {
                                                    "name": "question",
                                                    "label": "Question",
                                                    "tooltip": "Question column"
                                                },
                                                {
                                                    "name": "order_index",
                                                    "label": "Order",
                                                    "tooltip": "Order column"
                                                },
                                                {
                                                    "name": "response_options",
                                                    "label": "Response options",
                                                    "tooltip": "Response options column"
                                                },
                                                {
                                                    "name": "correct",
                                                    "label": "Correct",
                                                    "tooltip": "Correct column"
                                                },
                                                {
                                                    "name": "trait",
                                                    "label": "Trait",
                                                    "tooltip": "Trait column"
                                                },
                                                {
                                                    "name": "data_set_id",
                                                    "label": "Data set id",
                                                    "tooltip": "Data set id column"
                                                }
                                            ]
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 3
                                    },
                                    {
                                        "type": 0,
                                        "name": "data_set_id",
                                        "label": "Data set id",
                                        "definition": {
                                            "placeholder": 0,
                                            "defvalue": ""
                                        },
                                        "hideCondition": "parent.table_type == \"direct\"",
                                        "order": 1
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 13,
                            "label": "Randomize response options",
                            "description": "",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "1",
                            "testVariable": 53,
                            "name": "randomized_response_options",
                            "wizardStep": 3,
                            "stepTitle": "Items and navigation",
                            "order": 2,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "1"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 14,
                            "label": "Can go back?",
                            "description": "",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "1",
                            "testVariable": 60,
                            "name": "can_go_back",
                            "wizardStep": 3,
                            "stepTitle": "Items and navigation",
                            "order": 3,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "1"
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 4,
                    "title": "Stopping rules",
                    "description": "",
                    "orderNum": 2,
                    "colsNum": 0,
                    "wizard": 2,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 15,
                            "label": "Time-based stopping rule",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"type\":\"\",\"time_limit\":null}",
                            "testVariable": 51,
                            "name": "stopping_time",
                            "wizardStep": 4,
                            "stepTitle": "Stopping rules",
                            "order": 1,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "type",
                                        "label": "Type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "test",
                                                    "label": "test wide",
                                                    "order": "1"
                                                },
                                                {
                                                    "value": "item",
                                                    "label": "item",
                                                    "order": "0"
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "time_limit",
                                        "label": "Time limit (seconds)",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "!parent.type"
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 16,
                            "label": "Item count-based stopping rule",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"count\":\"\"}",
                            "testVariable": 52,
                            "name": "stopping_item_count",
                            "wizardStep": 4,
                            "stepTitle": "Stopping rules",
                            "order": 0,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "4",
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": "0"
                                        }
                                    },
                                    {
                                        "type": "0",
                                        "name": "count",
                                        "label": "Max item count",
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 5,
                    "title": "Response bank",
                    "description": "",
                    "orderNum": 3,
                    "colsNum": 0,
                    "wizard": 2,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 17,
                            "label": "Response bank",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"default\",\"custom_table\":[],\"data_set_id\":null}",
                            "testVariable": 50,
                            "name": "response_bank",
                            "wizardStep": 5,
                            "stepTitle": "Response bank",
                            "order": 0,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "fields": [
                                    {
                                        "type": "3",
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "placeholder": "0",
                                            "options": [
                                                {
                                                    "value": "default",
                                                    "label": "default"
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom"
                                                }
                                            ],
                                            "defvalue": "default"
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 12,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "definition": {
                                            "placeholder": "0",
                                            "cols": [
                                                {
                                                    "name": "item_id",
                                                    "label": "Item id",
                                                    "tooltip": "Item id column"
                                                },
                                                {
                                                    "name": "response",
                                                    "label": "Response",
                                                    "tooltip": "Response column"
                                                },
                                                {
                                                    "name": "trait",
                                                    "label": "Trait",
                                                    "tooltip": "Trait column"
                                                },
                                                {
                                                    "name": "correct",
                                                    "label": "Correct",
                                                    "tooltip": "Correct column"
                                                },
                                                {
                                                    "name": "session_id",
                                                    "label": "Session id",
                                                    "tooltip": "Session id column"
                                                },
                                                {
                                                    "name": "time_taken",
                                                    "label": "Time taken",
                                                    "tooltip": "Time taken column"
                                                },
                                                {
                                                    "name": "data_set_id",
                                                    "label": "Data set id",
                                                    "tooltip": "Data set id column"
                                                }
                                            ]
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 2
                                    },
                                    {
                                        "type": 0,
                                        "name": "data_set_id",
                                        "label": "Data set id",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "order": 1
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 18,
                            "label": "Response required",
                            "description": "",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "0",
                            "testVariable": 57,
                            "name": "response_required",
                            "wizardStep": 5,
                            "stepTitle": "Response bank",
                            "order": 1,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "0"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 19,
                            "label": "No response alert",
                            "description": "",
                            "hideCondition": "values.response_required == \"0\"",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "No answer given!",
                            "testVariable": 58,
                            "name": "no_response_alert",
                            "wizardStep": 5,
                            "stepTitle": "Response bank",
                            "order": 2,
                            "wizard": 2,
                            "definition": {
                                "placeholder": "0",
                                "defvalue": "No answer given!"
                            }
                        }
                    ]
                }
            ],
            "test": 4,
            "testName": "source_linear_test",
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "01378d1f3e05f8893fd2c9b21748c7a4e8075b85"
        },
        {
            "class_name": "Test",
            "id": 5,
            "name": "linear_test",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 1,
            "code": "if(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  print(ib)\n  if(ib$table_type == \"custom\") {\n    data_set_id = ib$data_set_id\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    trait_column = ib$custom_table$columns$trait\n    order_column = ib$custom_table$columns$order_index\n    data_set_id_column = ib$custom_table$columns$data_set_id\n\n    questions = concerto.table.query(\"SELECT id, {{question_column}} AS question, {{response_options_column}} AS response_options, {{trait_column}} AS trait FROM {{table}} WHERE {{data_set_id_column}} = '{{data_set_id}}' ORDER BY {{order_column}} ASC\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      trait_column=trait_column,\n      order_column=order_column,\n      table=table,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id))\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  print(questions)\n\n  return(questions)\n}\n\ngetContent = function(question, current_item, answers) {\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  options = NULL\n  response_classes = \"\"\n  response_styles = \"\"\n  if(o$response_type == \"multiple_choice\") {\n    #response options\n    if(randomized_response_options == \"1\") {\n      options = o$response_options[sample(1:length(o$response_options))]\n    } else {\n      options = o$response_options\n    }\n    for(i in 1:length(options)) {\n      options[[i]]$points = NULL\n    }\n    \n    response_classes = \"linear-test-response-section-vertical\"\n    response_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      response_classes = \"linear-test-response-section-horizontal\" \n      response_styles = paste0(\"width: \",response_width)\n    }\n  }\n  \n  content = concerto.template.join(templateId=linear_test_template,params=list(\n    paragraph = paragraph,\n    question = question$question,\n    response_type = o$response_type,\n    response_options = toJSON(options),\n    answers = toJSON(answers),\n    current_item = current_item,\n    response_classes = response_classes,\n    response_styles = response_styles\n  ))\n\n  return(content)\n}\n\nshouldStop = function(response, answers, questions, current_item, next_item) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n\n  if((sr_count$enabled == \"1\" && current_item >= as.numeric(sr_count$count)) || next_item > dim(questions)[1]) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, correct, scores, correctness, current_item) {\n  if(is.null(response$response)) { return(scores) }\n\n  table = \"default_linear_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  trait_column = \"trait\"\n  data_set_id_column = \"data_set_id\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    correct_column = rb$custom_table$columns$correct\n    trait_column = rb$custom_table$columns$trait\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  r = concerto.table.query(\"SELECT id FROM {{table}} WHERE {{item_id_column}}={{item_id}} AND {{session_id_column}}='{{session_id}}' AND {{data_set_id_column}}='{{data_set_id}}'\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    data_set_id_column=data_set_id_column,\n    data_set_id=dbEscapeStrings(concerto$connection, toString(rb$data_set_id))\n  ))\n  if(dim(r)[1] > 0) { \n    rid = r[1,\"id\"]\n    concerto.table.query(\"UPDATE {{table}} SET {{response_column}}='{{response}}', {{time_taken_column}}={{time_taken}}, {{correct_column}}={{correct}} WHERE id={{id}}\", list(\n      table=table,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      id=rid\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{correct_column}}, {{trait_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{correct}}, '{{trait}}', '{{data_set_id}}')\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(rb$data_set_id))\n    ))\n  }\n\n  if(is.null(scores[[question$trait]])) {\n    scores[[question$trait]] = 0\n  }\n\n  if(!is.null(correctness[current_item]) && !is.na(correctness[current_item])) { \n    prev_correct = correctness[current_item] \n    scores[[question$trait]] = scores[[question$trait]] - prev_correct\n  }\n\n  scores[[question$trait]] = scores[[question$trait]] + correct\n  return(scores)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = concerto.template.join(templateId=item_debug_template,params=list(id=question$id))\n  content = paste0(debug, content)\n  return(content)\n}\n\n#calculate score based on response (e.g. correct\/incorrect, or differing number of points depending on choice)\ncalculateScore = function(response, question) { \n  print(\"calculateScore()\")\n  if (is.character(question$response_options)) {\n    o = fromJSON(question$response_options)\n  }\n\n  if (o$response_type == \"open_text\") {\n    print(\"open text item\")\n    if(response$response == o$correct_answer) { #open text response just needs to match database correct answer\n      print(\"correct\")\n      return(1)\n    } else {\n      print(\"incorrect\")\n      return(0)\n    }\n  } else if (o$response_type == \"multiple_choice\") { #make it go through all the responses, see which one they matched with, and then give them points for the match.\n    print(\"multiple choice item\")\n\n    options = NULL #turn response options into a nice table rather than a list.\n    for(i in 1:length(o$response_options)) {\n      options = rbind(options, as.list(o$response_options[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {  \n      if (options[i,]$value == response$response) { #user chose this response option\n        print(\"response led to this many points:\")\n        print(options[i,]$points)\n        return(as.numeric(options[i,]$points)) #so they get this many points\n      }\n    }\n    print(\"Warning: User's response did not match any of the options in the item bank. They have been given 0 points for this response.\")\n    return(0) #no match, so no points\n  } \n  return(F)\n}\n\nupdateSavedState = function(questions, answers, time_limit, scores, correctness, current_item){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$linear_test)) {\n    concerto$promoted$.savedState$linear_test <<- list()\n  }\n  \n  concerto$promoted$.savedState$linear_test$questions <<- questions\n  concerto$promoted$.savedState$linear_test$answers <<- answers\n  concerto$promoted$.savedState$linear_test$time_limit <<- time_limit\n  concerto$promoted$.savedState$linear_test$scores <<- scores\n  concerto$promoted$.savedState$linear_test$correctness <<- correctness\n  concerto$promoted$.savedState$linear_test$current_item <<- current_item\n}\n\nsr_time = fromJSON(stopping_time)\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$linear_test)) {\n  questions = concerto$promoted$.savedState$linear_test$questions\n  answers = concerto$promoted$.savedState$linear_test$answers\n  time_limit = concerto$promoted$.savedState$linear_test$time_limit\n  scores = concerto$promoted$.savedState$linear_test$scores\n  correctness = concerto$promoted$.savedState$linear_test$correctness\n  current_item = concerto$promoted$.savedState$linear_test$current_item\n} else {\n  questions = getQuestions()\n  answers = NULL\n  time_limit = 0\n  if(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { \n    time_limit = as.numeric(sr_time$time_limit) \n  }\n  scores = list()\n  correctness = NULL\n  current_item = 1\n}\n\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\ntimer_set = FALSE\nif(time_limit > 0) { timer_set = TRUE }\nmax_items = dim(questions)[1]\nsr_item_count = fromJSON(stopping_item_count)\nif(sr_item_count$enabled == \"1\") { max_items = min(max_items, as.numeric(sr_item_count$count)) }\n\nwhile(T) {\n  show_previous = \"false\"\n  if(current_item > 1 && can_go_back == \"1\" && item_debug == \"0\") { show_previous = \"true\" }\n  show_pager = \"false\"\n  if(dim(questions)[1] > 1 && item_debug == \"0\") { show_pager = \"true\" }\n  show_next = \"false\"\n  if(current_item <= dim(questions)[1] || item_debug == \"1\") { show_next = \"true\" }\n  buttons = concerto.template.join(templateId=buttons_template, params=list(\n    show_previous=show_previous,\n    show_pager=show_pager,\n    show_next=show_next,\n    current_item=current_item,\n    max_items=max_items,\n    label_previous=previous_button_label,\n    label_next=next_button_label\n  ))\n\n  question = questions[current_item,]\n  content = getContent(question, current_item, answers)\n\n  if(item_debug == \"0\") {\n    updateSavedState(questions, answers, time_limit, scores, correctness, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = \"\"\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n\n    if(!is.null(response$response) || response$isTimeout == \"1\") {\n      correct = 0\n      if(is.null(response$response)) { response$response = \"\" }\n      correct = calculateScore(response, question)\n\n      scores = saveResponse(response, question, rb, correct, scores, correctness, current_item)\n      if(length(answers) < current_item) {\n        answers = c(answers, response$response)\n        correctness = c(correctness, correct)\n      } else {\n        answers[current_item] = response$response\n        correctness[current_item] = correct\n      }\n    }\n\n    prev_item = current_item\n    if(response$buttonPressed == \"next\" || response$isTimeout == \"1\") {\n      if(response_required == \"0\" || (!is.null(response$response) && response$response != \"\") || response$isTimeout == \"1\") {\n        current_item = current_item + 1\n        if(timer_set && sr_time$type == \"item\"){\n          time_limit = as.numeric(sr_time$time_limit) \n        }\n      } else {\n        warning_msg = no_response_alert\n      }\n    }\n    if(response$buttonPressed == \"previous\") {\n      current_item = current_item - 1\n      if(timer_set && sr_time$type == \"item\"){\n        time_limit = as.numeric(sr_time$time_limit) \n      }\n    }\n\n    if(shouldStop(response, answers, questions, prev_item, current_item)) {\n      if(response$isTimeout == \"1\") {\n        .branch = \"out_of_time\"\n      }\n      break\n    }\n  } else {\n    content = getDebugContent(content, question)\n    updateSavedState(questions, answers, time_limit, scores, correctness, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nrm(questions)\nconcerto$promoted$.savedState$linear_test <<- NULL",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 71,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 5,
                    "parentVariable": 45
                },
                {
                    "class_name": "TestVariable",
                    "id": 72,
                    "name": "paragraph",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "<p>Please answer question below:<\/p>\n",
                    "test": 5,
                    "parentVariable": 46
                },
                {
                    "class_name": "TestVariable",
                    "id": 73,
                    "name": "next_button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "next",
                    "test": 5,
                    "parentVariable": 47
                },
                {
                    "class_name": "TestVariable",
                    "id": 74,
                    "name": "previous_button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "previous",
                    "test": 5,
                    "parentVariable": 48
                },
                {
                    "class_name": "TestVariable",
                    "id": 75,
                    "name": "item_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"table_type\":\"direct\",\"direct_table\":[{\"id\":\"1\",\"question\":\"<p>If you have a nose bleed, what should you do?<\\\/p>\\n\",\"order\":\"1\",\"response_options\":{\"response_type\":\"multiple_choice\",\"correct_answer\":\"\",\"response_options\":[{\"value\":\"tilt_back\",\"label\":\"Tilt your head back\",\"points\":\"0\"},{\"value\":\"tilt_forwards\",\"label\":\"Tilt your head forwards\",\"points\":\"0.5\"},{\"value\":\"tilt_forwards_pinch\",\"label\":\"Tilt your head forwards and pinch your nose\",\"points\":\"1\"}]},\"trait\":\"first_aid\",\"order_index\":\"\"},{\"id\":\"2\",\"question\":\"<p>In first aid,&nbsp;ABC stands for what?<\\\/p>\\n\",\"order\":\"2\",\"response_options\":{\"response_type\":\"multiple_choice\",\"correct_answer\":\"\",\"response_options\":[{\"value\":\"airway_breathing_circulation\",\"label\":\"Airway, breathing, circulation\",\"points\":\"1\"},{\"value\":\"alcoholic_beverage_control\",\"label\":\"Alcoholic Beverage Control\",\"points\":\"0\"}]},\"trait\":\"first_aid\",\"order_index\":\"\"},{\"id\":\"3\",\"question\":\"<p>In CPR, how many chest compressions per minute should be performed?<\\\/p>\\n\",\"order\":\"3\",\"response_options\":{\"response_type\":\"open_text\",\"correct_answer\":\"100\",\"response_options\":[]},\"trait\":\"first_aid\",\"order_index\":\"\"}],\"custom_table\":[],\"custom_question_column\":[],\"custom_order_column\":[],\"custom_response_options\":[],\"custom_correct_column\":[],\"custom_trait_column\":[],\"custom_test_id_column\":[],\"data_set_id\":\"\"}",
                    "test": 5,
                    "parentVariable": 49
                },
                {
                    "class_name": "TestVariable",
                    "id": 76,
                    "name": "response_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"table_type\":\"default\",\"custom_table\":[],\"custom_item_id_column\":[],\"custom_response_column\":[],\"custom_trait_column\":[],\"custom_correct_column\":[],\"custom_session_id_column\":[],\"custom_time_taken_column\":[],\"data_set_id\":\"\"}",
                    "test": 5,
                    "parentVariable": 50
                },
                {
                    "class_name": "TestVariable",
                    "id": 77,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"time_limit\":\"\",\"type\":\"\"}",
                    "test": 5,
                    "parentVariable": 51
                },
                {
                    "class_name": "TestVariable",
                    "id": 78,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"count\":\"\"}",
                    "test": 5,
                    "parentVariable": 52
                },
                {
                    "class_name": "TestVariable",
                    "id": 79,
                    "name": "randomized_response_options",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "1",
                    "test": 5,
                    "parentVariable": 53
                },
                {
                    "class_name": "TestVariable",
                    "id": 80,
                    "name": "order",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "random",
                    "test": 5,
                    "parentVariable": 54
                },
                {
                    "class_name": "TestVariable",
                    "id": 81,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 5,
                    "parentVariable": 55
                },
                {
                    "class_name": "TestVariable",
                    "id": 82,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 5,
                    "parentVariable": 56
                },
                {
                    "class_name": "TestVariable",
                    "id": 83,
                    "name": "response_required",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 5,
                    "parentVariable": 57
                },
                {
                    "class_name": "TestVariable",
                    "id": 84,
                    "name": "no_response_alert",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "No answer given!",
                    "test": 5,
                    "parentVariable": 58
                },
                {
                    "class_name": "TestVariable",
                    "id": 85,
                    "name": "scores",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 5,
                    "parentVariable": 59
                },
                {
                    "class_name": "TestVariable",
                    "id": 86,
                    "name": "can_go_back",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "1",
                    "test": 5,
                    "parentVariable": 60
                },
                {
                    "class_name": "TestVariable",
                    "id": 87,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p><span style=\"line-height: 20.8px;\">1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/span><\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 5,
                    "parentVariable": 61
                },
                {
                    "class_name": "TestVariable",
                    "id": 88,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 5,
                    "parentVariable": 62
                },
                {
                    "class_name": "TestVariable",
                    "id": 89,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "DEMO TEST",
                    "test": 5,
                    "parentVariable": 63
                },
                {
                    "class_name": "TestVariable",
                    "id": 90,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 5,
                    "parentVariable": 64
                },
                {
                    "class_name": "TestVariable",
                    "id": 91,
                    "name": "responses_layout",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "vertical",
                    "test": 5,
                    "parentVariable": 65
                },
                {
                    "class_name": "TestVariable",
                    "id": 92,
                    "name": "response_width",
                    "type": 0,
                    "description": "<p>Can be any valid CSS width property value. E.g.:&nbsp;<strong>200px<\/strong>,&nbsp;<strong>20%<\/strong>.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "",
                    "test": 5,
                    "parentVariable": 66
                },
                {
                    "class_name": "TestVariable",
                    "id": 93,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 5,
                    "parentVariable": 67
                },
                {
                    "class_name": "TestVariable",
                    "id": 94,
                    "name": "linear_test_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "linear_test_content",
                    "test": 5,
                    "parentVariable": 68
                },
                {
                    "class_name": "TestVariable",
                    "id": 95,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "test_item_debug",
                    "test": 5,
                    "parentVariable": 69
                },
                {
                    "class_name": "TestVariable",
                    "id": 96,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "buttons_linear_test",
                    "test": 5,
                    "parentVariable": 70
                }
            ],
            "sourceWizard": 2,
            "sourceWizardName": "linear_test",
            "sourceWizardTest": 4,
            "sourceWizardTestName": "source_linear_test",
            "updatedOn": "2018-05-16 18:17:11",
            "updatedBy": "admin",
            "nodes": [],
            "nodesConnections": [],
            "tags": "_concerto_core",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "e3d9bdde183af441b9dc78032fcce9598f86ec42"
        },
        {
            "class_name": "ViewTemplate",
            "id": 2,
            "name": "linear_test_content",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": ".linear-test-response-table {\n  border: 0 none;\n  border-collapse: separate;\n  border-spacing: 0;\n}\n.linear-test-response-table td {\n  padding: 0 5px 0 0;\n}\n.linear-test-response-section-horizontal {\n  float: left; \n  margin: 5px;\n  display: block;\n}\n.linear-test-response-section-vertical {\n  margin: 5px;\n}\n.linear-test-response-group {\n  text-align: left;\n}\n.linear-test-response-label-cell p {\n  margin-top: 0px;\n  margin-bottom: 0px;\n}\n.linear-test-response-button-cell {\n  padding-right: 5px;\n}",
            "js": "testRunner.controllerProvider.register(\"linearTest\", function($scope) {\n  $scope.currentItem = {{current_item}} - 1;\n  $scope.answers = {{answers}};\n  if(typeof $scope.answers === 'object' && $scope.answers.constructor !== Array || $scope.answers === null) $scope.answers = [];                                    \n  if($scope.answers.constructor !== Array) $scope.answers = [$scope.answers];                                     \n  $scope.responseOptions = {{response_options}};\n  $scope.value = null;\n  if($scope.answers.length > $scope.currentItem) $scope.value = $scope.answers[$scope.currentItem];\n});",
            "html": "{{paragraph}}\n<div ng-controller=\"linearTest\">{{question}}\n<div class=\"linear-test-response-group\" ng-if=\"'{{response_type}}'=='multiple_choice'\">\n<div class=\"{{response_classes}}\" ng-repeat=\"option in responseOptions track by $index\" style=\"{{response_styles}}\">\n<table class=\"linear-test-response-table\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<td class=\"linear-test-response-button-cell\"><label for=\"input_response_[[$index+1]]\"><input id=\"input_response_[[$index+1]]\" name=\"response\" ng-attr-checked=\"[[answers[currentItem] == option.value ? 'checked' : undefined]]\" ng-model=\"value\" type=\"radio\" value=\"[[option.value]]\" \/> <\/label><\/td>\n\t\t\t<td class=\"linear-test-response-label-cell\"><label for=\"input_response_[[$index+1]]\">[[option.label]]<\/label><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n<\/div>\n\n<div style=\"clear:both;\">&nbsp;<\/div>\n<\/div>\n\n<div ng-if=\"'{{response_type}}'=='open_text'\"><input name=\"response\" ng-model=\"value\" style=\"width:100%;\" type=\"text\" \/><\/div>\n<\/div>\n",
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "42e92c7696419ba0111c813cdb1b95e1a77146cd"
        },
        {
            "class_name": "ViewTemplate",
            "id": 3,
            "name": "test_item_debug",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": "",
            "js": "",
            "html": "<div class=\"debug\">\n<p>Current item id: #{{id}}<\/p>\n\n<p>Next item id: <input name=\"item_debug\" type=\"text\" \/><\/p>\n<\/div>\n",
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "55597daa2df13bf2d80f0be7acc06ea69fac2723"
        },
        {
            "class_name": "ViewTemplate",
            "id": 4,
            "name": "buttons_linear_test",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": ".button-group {\n  width: 100%;\n  display: table;\n  table-layout: fixed;\n}\n.button-group ul {\n  display: table-row;\n}\nbutton {\n  background-color: #b9d979;\n  border: 0 none;\n  color: #000000;\n  font-family: \"Roboto\";\n  font-size: 1.1em;\n  font-style: normal;\n  font-weight: 500;\n  padding: 7px;\n}\n.button-group li {\n  display: table-cell;\n  text-align: center;\n  padding: 5px;\n}\n.button-group li button {\n  width: 100%;\n}",
            "js": "",
            "html": "<div class=\"button-group\">\n<ul>\n\t<li><button class=\"linear_test_button\" name=\"previous\" ng-show=\"{{show_previous}}\">{{label_previous}}<\/button><\/li>\n\t<li ng-if=\"{{show_pager}}\">{{current_item}} \/ {{max_items}}<\/li>\n\t<li><button class=\"linear_test_button\" name=\"next\" ng-show=\"{{show_next}}\">{{label_next}}<\/button><\/li>\n<\/ul>\n<\/div>\n",
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "b54282fcf6ef0194eab9dd7a29b815cb51617d12"
        }
    ]
}