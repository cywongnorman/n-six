{
    "version": "5.0.beta.5.3",
    "collection": [
        {
            "class_name": "Test",
            "id": 25,
            "name": "source_polyCAT",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "library(catR)\n\nif(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  data_set_id = ib$data_set_id\n  if(ib$table_type == \"custom\") {\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    irt_discrimination_column = ib$custom_table$columns$irt_discrimination\n    cb_group_column = ib$custom_table$columns$cb_group\n    questions = concerto.table.query(\"SELECT id, {{question_column}} AS question, {{response_options_column}} AS response_options, {{irt_discrimination_column}} AS irt_discrimination, {{cb_group_column}} AS cb_group, {{data_set_id_column}} AS data_set_id FROM {{table}}\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      irt_discrimination_column=irt_discrimination_column,\n      cb_group_column=cb_group_column,\n      data_set_id_column=data_set_id_column,\n      table=table\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  print(questions)\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\n\ngetContent = function(question) {\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    if(randomize_response_options == \"1\") {\n      options = o[sample(1:length(o))]\n    } else {\n      options = o;\n    }\n  }\n  for(i in 1:length(options)) {\n    options[[i]]$irt_parameter = NULL\n  }\n  content = concerto.template.join(templateId=\"polyCAT_content\", params=list(\n    paragraph=paragraph,\n    options=toJSON(options),\n    question=question$question\n  ))\n  return(content)\n}\n\n# when the user responds to an item, it returns the Value of their response. We need to take this value and then find out what response column it refers to in the item bank (i.e. response 0? response 4?)\ngetResponseNumber = function(response = NULL, questions) {\n  print(\"matching response number\")\n  print(response)\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      if (is.null(response)) { #user did not respond to the question. Presumably the time ran out or something like that. In that case, just take the middle option.\n        print(paste0(\"Warning: User did not respond to the question. Taking option \", round((dim(options)[1] + 0.1) \/ 2, 0), \" as their response.\")) #here the first response is number 1. below it's 0 which is why we do -1.\n        return (round((dim(options)[1] + 0.1) \/ 2, 0) - 1) #do rounding because there might be an odd number of responses. R rounding takes 0.5 down to 0, so add 0.1 so that it's 0.6 and goes up to 1.\n      } else if (option$value == response) { #have we found the correct response option?\n        return (i - 1) #i - 1 because catR wants the responses to start from 0. \n      }\n    }\n\n    stop(\"User's response did not match any of the options in the database\")\n\n  } else {\n    stop(\"Question does not have any response options\")\n  }\n\n}\n\nshouldStop = function(response, sem, out, questions) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(TRUE) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  print(sr_accuracy)\n  print(sr_accuracy$enabled)\n  print(as.numeric(sr_accuracy$accuracy))\n  print(sem)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, theta, sem) {\n  table = \"default_polycat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  data_set_id_column = \"data_set_id\"\n  data_set_id = rb$data_set_id\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    theta_column = rb$custom_table$columns$theta\n    sem_column = rb$custom_table$columns$sem\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{theta_column}}, {{sem_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{theta}}, {{sem}}, '{{data_set_id}}')\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem,\n    data_set_id_column=data_set_id_column,\n    data_set_id=data_set_id\n  ))\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = concerto.template.join(templateId=\"test_item_debug\",params=list(id=question$id))\n  content = paste0(debug, content)\n  return(content)\n}\n\n# nasty function used by getParamBank to unlist the parameters from the questions storage.\nunlistParameters = function(questions) {\n\n  param_bank = NULL\n  maxresponses = 0\n\n  #find the max number of responses (there must be an easier way to do it that doesn't involve going through each item one at a time.\n  for (i in 1:nrow(questions)) {  \n    p = questions[i,]$response_options\n\n    if(is.character(p)) { \n      p = fromJSON(p)\n    }\n\n    if (maxresponses < length(p)) {\n      maxresponses = length(p)\n    } \n  }\n\n  param_bank = matrix(NA, ncol=maxresponses, nrow=nrow(questions)) #set up empty matrix with max cols defined by max response options, and nrow defined by number of questions\n\n  for (i in 1:nrow(questions)) {   \n    p = questions[i,]$response_options\n\n    if(is.character(p)) { \n      p = fromJSON(p)\n    }\n\n    for(j in 1:length(p)) {\n      param_bank[i,j] = p[[j]]$irt_parameter #puts each parameter into the matrix one at a time.\n    } \n\n  }   \n\n  param_bank = apply(param_bank, 2, function (x) { as.numeric(x) } ) #make it numeric\n\n  param_bank = param_bank[,-1] #get rid of first column which should just be NAs.\n\n  return(param_bank)\n\n}\n\n#look for any obvious mistakes in the parameter bank and give out warnings.\ncheckParamBank = function (poly_model, param_bank, questions) {\n  print(\"Parameter bank:\")\n  print(param_bank)\n\n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    # look for any missing discriminations\n    missed = which(is.na(param_bank[,1]))\n    missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n    if (length(missing_ids) > 0) {\n      print(paste0(c(\"Warning: The following item ids do not have a discrimination parameter set, as required by your model, and therefore will only be used if there are no other valid items:\", missing_ids, \". See the parameter bank above; the first column contains the discrimination parameter.\"), collapse=\" \"))\n    }\n  }\n\n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    diffcol = 2\n  } else {\n    diffcol = 1\n  }\n\n  #look for missing difficulty parameters from first column (i.e. it will only find a problem if the first column is missing)\n  missed = which(is.na(param_bank[,diffcol]))\n  missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n  if (length(missing_ids) > 0) {\n    stop(paste0(c(\"The following item ids are missing a difficulty parameter for the first response option:\", missing_ids, \". See the parameter bank above.\"), collapse=\" \")) \n  }\n  return(TRUE)\n}\n\n#gets the parameter bank. Based on the type of model there are different parameters.\ngetParamBank = function(poly_model, questions) {\n  print(\"getParamBank\")\n  #print(questions)\n  #print(questions[1,]$response_options)\n  #print(poly_model)\n\n\n\n  if (poly_model == \"PCM\") { #PCM has just the parameters based on number of response options - 1.\n\n    param_bank = unlistParameters(questions)\n\n  } else if (poly_model == \"GRM\") { #GRM has the same parameters as response options, but one of them is discrimination.\n    param_bank = unlistParameters(questions)\n\n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n\n  } else if (poly_model == \"GPCM\") { #GPCM has the same parameters as response options, but one of them is discrimination.\n\n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n\n  }\n  checkParamBank(poly_model, param_bank, questions)\n\n  return(param_bank)\n}\n\nupdateSavedState = function(questions, theta, sem, out, time_limit, response_vector, current_item){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$polyCAT)) {\n    concerto$promoted$.savedState$polyCAT <<- list()\n  }\n  \n  concerto$promoted$.savedState$polyCAT$questions <<- questions\n  concerto$promoted$.savedState$polyCAT$theta <<- theta\n  concerto$promoted$.savedState$polyCAT$sem <<- sem\n  concerto$promoted$.savedState$polyCAT$out <<- out\n  concerto$promoted$.savedState$polyCAT$time_limit <<- time_limit\n  concerto$promoted$.savedState$polyCAT$response_vector <<- response_vector\n  concerto$promoted$.savedState$polyCAT$current_item <<- current_item\n}\n\nsr_time = fromJSON(stopping_time)\nresumed = F\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$polyCAT)) {\n  resumed = T\n  \n  questions = concerto$promoted$.savedState$polyCAT$questions\n  theta = concerto$promoted$.savedState$polyCAT$theta\n  sem = concerto$promoted$.savedState$polyCAT$sem\n  out = concerto$promoted$.savedState$polyCAT$out\n  time_limit = concerto$promoted$.savedState$polyCAT$time_limit\n  response_vector = concerto$promoted$.savedState$polyCAT$response_vector\n  current_item = concerto$promoted$.savedState$polyCAT$current_item\n} else {\n  questions = getQuestions()\n  theta = 0\n  sem = 1\n  out = NULL\n  time_limit = 0\n  if(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { time_limit = as.numeric(sr_time$time_limit) }\n  response_vector = c()\n  current_item = 1\n}\n\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\n\nparam_bank = getParamBank(poly_model, questions)\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\ntimer_set = FALSE\nif(time_limit > 0) { timer_set = TRUE }\nbuttons = concerto.template.join(templateId=\"buttons_single\",params=list(label=button_label))\n\nif(item_debug == \"0\" && !resumed) { \n  current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n}\nwhile(T) {\n  question = questions[current_item,]\n  content = getContent(question)\n\n  if(item_debug == \"0\") {\n    updateSavedState(questions, theta, sem, out, time_limit, response_vector, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = \"\"\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      #correct = 0\n      #if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      response_vector = c(response_vector, getResponseNumber(response$response))\n      out = c(out, current_item)\n      print(paste0(\"out = \", out))\n      \n      if(!is.null(question$enemy_items) && question$enemy_items != \"\") {\n        enemy_items = as.numeric(strsplit(question$enemy_items, \",\")[[1]])\n        for(i in 1:length(enemy_items)) {\n          for(j in 1:(dim(questions)[1])) {\n\t\t\tif(questions[j,\"id\"] == enemy_items[i]) {\n              out = c(out, j)\n              break\n            }\n          }\n        }\n      }\n      \n      print(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F))\n      theta <- thetaEst(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"theta = \", theta))\n      sem <- semTheta(theta, matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"sem = \", sem))\n      saveResponse(response, question, rb, theta, sem)\n      if(shouldStop(response, sem, out, questions)) {\n        if(response$isTimeout == \"1\") {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(timer_set && sr_time$type == \"item\") {\n          time_limit = as.numeric(sr_time$time_limit)\n        }\n        current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    updateSavedState(questions, theta, sem, out, time_limit, response_vector, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)\nconcerto$promoted$.savedState$polyCAT <<- NULL",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 329,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 330,
                    "name": "paragraph",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 331,
                    "name": "button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 332,
                    "name": "item_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 333,
                    "name": "response_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 334,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":{\"value\":\"0\"},\"time_limit\":\"\",\"type\":null}",
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 335,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"count_limit\":\"\",\"count\":\"\"}",
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 336,
                    "name": "stopping_accuracy",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":{\"value\":\"0\"},\"accuracy\":{\"value\":\"\"}}",
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 337,
                    "name": "scoring_method",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 338,
                    "name": "next_item_criterion",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 339,
                    "name": "randomesque",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 340,
                    "name": "randomize_response_options",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 341,
                    "name": "no_answer_alert",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 342,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 343,
                    "name": "score",
                    "type": 1,
                    "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 344,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 345,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 346,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 347,
                    "name": "cb",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 348,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 349,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 350,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 351,
                    "name": "poly_model",
                    "type": 0,
                    "description": "<p>The polytomous IRT model to use (&quot;PCM&quot;, &quot;GRM&quot; or &quot;GPCM&quot;)<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 352,
                    "name": "polyCAT_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 353,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 354,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 25,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2018-05-16 18:17:09",
            "updatedBy": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "bcaebcb9dcbfefd766e442fd133b4d3d672bde2b"
        },
        {
            "class_name": "TestWizard",
            "id": 11,
            "name": "polyCAT",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "steps": [
                {
                    "class_name": "TestWizardStep",
                    "id": 22,
                    "title": "Presentation",
                    "description": "<p>polyCAT presentation options<\/p>\n",
                    "orderNum": 0,
                    "colsNum": 0,
                    "wizard": 11,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 79,
                            "label": "Paragraph",
                            "description": "<p>polyCAT page paragraph<\/p>\n",
                            "hideCondition": "",
                            "type": 2,
                            "passableThroughUrl": "0",
                            "value": "<p>Please answer questions below:<\/p>\n",
                            "testVariable": 330,
                            "name": "paragraph",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 2,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "<p>Please answer questions below:<\/p>\n"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 80,
                            "label": "Button label",
                            "description": "<p>CAT page continue button label<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "continue",
                            "testVariable": 331,
                            "name": "button_label",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 5,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "continue"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 81,
                            "label": "No answer alert",
                            "description": "<p>Alert message that will appear when no answer is given<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "No answer given!",
                            "testVariable": 341,
                            "name": "no_answer_alert",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 3,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "No answer given!"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 82,
                            "label": "Title",
                            "description": "",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "DEMO TEST",
                            "testVariable": 348,
                            "name": "title",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 1,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "DEMO TEST"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 83,
                            "label": "polyCAT template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "polyCAT_content",
                            "testVariable": 352,
                            "name": "polyCAT_template",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 0,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "polyCAT_content"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 84,
                            "label": "Item debug template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "test_item_debug",
                            "testVariable": 353,
                            "name": "item_debug_template",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 0,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "test_item_debug"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 85,
                            "label": "Buttons template",
                            "description": "",
                            "hideCondition": "",
                            "type": 5,
                            "passableThroughUrl": "0",
                            "value": "buttons_single",
                            "testVariable": 354,
                            "name": "buttons_template",
                            "wizardStep": 22,
                            "stepTitle": "Presentation",
                            "order": 4,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "buttons_single"
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 23,
                    "title": "Item bank",
                    "description": "",
                    "orderNum": 1,
                    "colsNum": 0,
                    "wizard": 11,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 86,
                            "label": "Randomize response options order",
                            "description": "<p>Check if you want order of response options to be random<\/p>\n",
                            "hideCondition": "",
                            "type": 4,
                            "passableThroughUrl": "0",
                            "value": "0",
                            "testVariable": 340,
                            "name": "randomize_response_options",
                            "wizardStep": 23,
                            "stepTitle": "Item bank",
                            "order": 2,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 87,
                            "label": "Item bank",
                            "description": "<p>polyCAT item bank definition.<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"\",\"direct_table\":[],\"custom_table\":[],\"data_set_id\":null}",
                            "testVariable": 332,
                            "name": "item_bank",
                            "wizardStep": 23,
                            "stepTitle": "Item bank",
                            "order": 1,
                            "wizard": 11,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "direct",
                                                    "label": "direct",
                                                    "order": 0
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom",
                                                    "order": 1
                                                }
                                            ]
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 10,
                                        "name": "direct_table",
                                        "label": "Table",
                                        "definition": {
                                            "placeholder": 0,
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "placeholder": 0,
                                                    "fields": [
                                                        {
                                                            "type": 0,
                                                            "name": "id",
                                                            "label": "Id",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 2,
                                                            "name": "question",
                                                            "label": "Question",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 10,
                                                            "name": "response_options",
                                                            "label": "Response_options",
                                                            "definition": {
                                                                "placeholder": 0,
                                                                "element": {
                                                                    "type": 9,
                                                                    "definition": {
                                                                        "placeholder": 0,
                                                                        "fields": [
                                                                            {
                                                                                "type": 0,
                                                                                "name": "value",
                                                                                "label": "Value",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": 2,
                                                                                "name": "label",
                                                                                "label": "Label",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            },
                                                                            {
                                                                                "type": 0,
                                                                                "name": "irt_parameter",
                                                                                "label": "IRT Parameter (betaj or deltaj)",
                                                                                "definition": {
                                                                                    "placeholder": 0
                                                                                }
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "irt_discrimination",
                                                            "label": "IRT discrimination",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "cb_group",
                                                            "label": "CB group",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "enemy_items",
                                                            "label": "Enemy items ids",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "hideCondition": "parent.table_type != \"direct\"",
                                        "order": 2
                                    },
                                    {
                                        "type": 12,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "definition": {
                                            "placeholder": 0,
                                            "cols": [
                                                {
                                                    "name": "question",
                                                    "label": "Question",
                                                    "tooltip": "Question column"
                                                },
                                                {
                                                    "name": "response_options",
                                                    "label": "Response options",
                                                    "tooltip": "Response options column"
                                                },
                                                {
                                                    "name": "irt_discrimination",
                                                    "label": "IRT discrimination",
                                                    "tooltip": "IRT discrimination column"
                                                },
                                                {
                                                    "name": "cb_group",
                                                    "label": "CB group",
                                                    "tooltip": "Content Balancing group column"
                                                },
                                                {
                                                    "name": "data_set_id",
                                                    "label": "Data set id",
                                                    "tooltip": "Data set id column"
                                                },
                                                {
                                                    "name": "enemy_items",
                                                    "label": "Enemy items",
                                                    "tooltip": "Enemy items ids"
                                                }
                                            ]
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 3
                                    },
                                    {
                                        "type": 0,
                                        "name": "data_set_id",
                                        "label": "Data set id",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.table_type == \"direct\"",
                                        "order": 1
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 88,
                            "label": "Polytomous IRT Model",
                            "description": "<p>The&nbsp;Polytomous IRT Model that has produced the item parameters.<\/p>\n",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "PCM",
                            "testVariable": 351,
                            "name": "poly_model",
                            "wizardStep": 23,
                            "stepTitle": "Item bank",
                            "order": 0,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "PCM",
                                        "label": "PCM",
                                        "order": 0
                                    },
                                    {
                                        "value": "GRM",
                                        "label": "GRM",
                                        "order": 1
                                    },
                                    {
                                        "value": "GPCM",
                                        "label": "GPCM",
                                        "order": 2
                                    }
                                ],
                                "defvalue": "PCM"
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 24,
                    "title": "polyCAT options",
                    "description": "",
                    "orderNum": 2,
                    "colsNum": 0,
                    "wizard": 11,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 89,
                            "label": "Next item criterion",
                            "description": "",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "MFI",
                            "testVariable": 338,
                            "name": "next_item_criterion",
                            "wizardStep": 24,
                            "stepTitle": "polyCAT options",
                            "order": 0,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "MFI",
                                        "label": "MFI"
                                    },
                                    {
                                        "value": "bOpt",
                                        "label": "bOpt"
                                    },
                                    {
                                        "value": "random",
                                        "label": "random"
                                    }
                                ],
                                "defvalue": "MFI"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 90,
                            "label": "Next item randomesque",
                            "description": "<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n",
                            "hideCondition": "",
                            "type": 0,
                            "passableThroughUrl": "0",
                            "value": "1",
                            "testVariable": 339,
                            "name": "randomesque",
                            "wizardStep": 24,
                            "stepTitle": "polyCAT options",
                            "order": 1,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "defvalue": "1"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 91,
                            "label": "Scoring method",
                            "description": "<p>Ability estimator<\/p>\n",
                            "hideCondition": "",
                            "type": 3,
                            "passableThroughUrl": "0",
                            "value": "BM",
                            "testVariable": 337,
                            "name": "scoring_method",
                            "wizardStep": 24,
                            "stepTitle": "polyCAT options",
                            "order": 2,
                            "wizard": 11,
                            "definition": {
                                "placeholder": 0,
                                "options": [
                                    {
                                        "value": "BM",
                                        "label": "BM"
                                    },
                                    {
                                        "value": "ML",
                                        "label": "ML"
                                    },
                                    {
                                        "value": "WL",
                                        "label": "WL"
                                    },
                                    {
                                        "value": "EAP",
                                        "label": "EAP"
                                    }
                                ],
                                "defvalue": "BM"
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 92,
                            "label": "Content Balancing",
                            "description": "",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"props\":[]}",
                            "testVariable": 347,
                            "name": "cb",
                            "wizardStep": 24,
                            "stepTitle": "polyCAT options",
                            "order": 3,
                            "wizard": 11,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 10,
                                        "name": "props",
                                        "label": "Group proportions",
                                        "definition": {
                                            "placeholder": 0,
                                            "element": {
                                                "type": 9,
                                                "definition": {
                                                    "placeholder": 0,
                                                    "fields": [
                                                        {
                                                            "type": 0,
                                                            "name": "name",
                                                            "label": "Group name",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        },
                                                        {
                                                            "type": 0,
                                                            "name": "prop",
                                                            "label": "Group proportion",
                                                            "definition": {
                                                                "placeholder": 0
                                                            }
                                                        }
                                                    ]
                                                }
                                            }
                                        },
                                        "order": 1,
                                        "hideCondition": "parent.enabled == \"0\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 25,
                    "title": "Stopping rules",
                    "description": "",
                    "orderNum": 3,
                    "colsNum": 0,
                    "wizard": 11,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 93,
                            "label": "Time-based stopping rule",
                            "description": "<p>Time-based stopping rule that will stop the test when the specified number of seconds has passed<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"type\":\"\",\"time_limit\":null}",
                            "testVariable": 334,
                            "name": "stopping_time",
                            "wizardStep": 25,
                            "stepTitle": "Stopping rules",
                            "order": 1,
                            "wizard": 11,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "type",
                                        "label": "Type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "test",
                                                    "label": "Test",
                                                    "order": 0
                                                },
                                                {
                                                    "value": "item",
                                                    "label": "Item",
                                                    "order": 1
                                                }
                                            ]
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "time_limit",
                                        "label": "Time limit (seconds)",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "!parent.type"
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 94,
                            "label": "Item count-based stopping rule",
                            "description": "<p>Item count-based stopping rule that will stop the test after the specified number of items is answered<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"count\":null}",
                            "testVariable": 335,
                            "name": "stopping_item_count",
                            "wizardStep": 25,
                            "stepTitle": "Stopping rules",
                            "order": 0,
                            "wizard": 11,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "count",
                                        "label": "Item count limit",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        },
                        {
                            "class_name": "TestWizardParam",
                            "id": 95,
                            "label": "Accuracy-based stopping rule",
                            "description": "<p>Accuracy-based stopping rule in SEM units that will stop the test when at least certain accuracy is reached<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"enabled\":\"0\",\"accuracy\":null}",
                            "testVariable": 336,
                            "name": "stopping_accuracy",
                            "wizardStep": 25,
                            "stepTitle": "Stopping rules",
                            "order": 2,
                            "wizard": 11,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 4,
                                        "name": "enabled",
                                        "label": "Enabled",
                                        "definition": {
                                            "placeholder": 0
                                        }
                                    },
                                    {
                                        "type": 0,
                                        "name": "accuracy",
                                        "label": "Minimum accuracy",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "hideCondition": "parent.enabled != \"1\""
                                    }
                                ]
                            }
                        }
                    ]
                },
                {
                    "class_name": "TestWizardStep",
                    "id": 26,
                    "title": "Response bank",
                    "description": "",
                    "orderNum": 4,
                    "colsNum": 0,
                    "wizard": 11,
                    "params": [
                        {
                            "class_name": "TestWizardParam",
                            "id": 96,
                            "label": "Response table",
                            "description": "<p>Response bank definition<\/p>\n",
                            "hideCondition": "",
                            "type": 9,
                            "passableThroughUrl": "0",
                            "value": "{\"table_type\":\"default\",\"custom_table\":[],\"data_set_id\":null}",
                            "testVariable": 333,
                            "name": "response_bank",
                            "wizardStep": 26,
                            "stepTitle": "Response bank",
                            "order": 0,
                            "wizard": 11,
                            "definition": {
                                "fields": [
                                    {
                                        "type": 3,
                                        "name": "table_type",
                                        "label": "Table type",
                                        "definition": {
                                            "placeholder": 0,
                                            "options": [
                                                {
                                                    "value": "default",
                                                    "label": "default"
                                                },
                                                {
                                                    "value": "custom",
                                                    "label": "custom"
                                                }
                                            ],
                                            "defvalue": "default"
                                        },
                                        "order": 0
                                    },
                                    {
                                        "type": 12,
                                        "name": "custom_table",
                                        "label": "Custom table",
                                        "definition": {
                                            "placeholder": 0,
                                            "cols": [
                                                {
                                                    "name": "item_id",
                                                    "label": "Item d",
                                                    "tooltip": "Item id column"
                                                },
                                                {
                                                    "name": "response",
                                                    "label": "Response",
                                                    "tooltip": "Response column"
                                                },
                                                {
                                                    "name": "time_taken",
                                                    "label": "Time taken",
                                                    "tooltip": "Time taken column"
                                                },
                                                {
                                                    "name": "session_id",
                                                    "label": "Session id",
                                                    "tooltip": "Session id column"
                                                },
                                                {
                                                    "name": "theta",
                                                    "label": "Theta",
                                                    "tooltip": "Theta column"
                                                },
                                                {
                                                    "name": "sem",
                                                    "label": "SEM",
                                                    "tooltip": "SEM column"
                                                },
                                                {
                                                    "name": "data_set_id",
                                                    "label": "Data set id",
                                                    "tooltip": "Data set id column"
                                                }
                                            ]
                                        },
                                        "hideCondition": "parent.table_type != \"custom\"",
                                        "order": 2
                                    },
                                    {
                                        "type": 0,
                                        "name": "data_set_id",
                                        "label": "Data set id",
                                        "definition": {
                                            "placeholder": 0
                                        },
                                        "order": 1
                                    }
                                ]
                            }
                        }
                    ]
                }
            ],
            "test": 25,
            "testName": "source_polyCAT",
            "updatedOn": "2018-05-16 18:17:09",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "06ad5069feaba7d6da1c001cb9ab666d0909c258"
        },
        {
            "class_name": "Test",
            "id": 34,
            "name": "polyCAT",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 1,
            "code": "library(catR)\n\nif(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  data_set_id = ib$data_set_id\n  if(ib$table_type == \"custom\") {\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    irt_discrimination_column = ib$custom_table$columns$irt_discrimination\n    cb_group_column = ib$custom_table$columns$cb_group\n    questions = concerto.table.query(\"SELECT id, {{question_column}} AS question, {{response_options_column}} AS response_options, {{irt_discrimination_column}} AS irt_discrimination, {{cb_group_column}} AS cb_group, {{data_set_id_column}} AS data_set_id FROM {{table}}\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      irt_discrimination_column=irt_discrimination_column,\n      cb_group_column=cb_group_column,\n      data_set_id_column=data_set_id_column,\n      table=table\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  print(questions)\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\n\ngetContent = function(question) {\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    if(randomize_response_options == \"1\") {\n      options = o[sample(1:length(o))]\n    } else {\n      options = o;\n    }\n  }\n  for(i in 1:length(options)) {\n    options[[i]]$irt_parameter = NULL\n  }\n  content = concerto.template.join(templateId=\"polyCAT_content\", params=list(\n    paragraph=paragraph,\n    options=toJSON(options),\n    question=question$question\n  ))\n  return(content)\n}\n\n# when the user responds to an item, it returns the Value of their response. We need to take this value and then find out what response column it refers to in the item bank (i.e. response 0? response 4?)\ngetResponseNumber = function(response = NULL, questions) {\n  print(\"matching response number\")\n  print(response)\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      if (is.null(response)) { #user did not respond to the question. Presumably the time ran out or something like that. In that case, just take the middle option.\n        print(paste0(\"Warning: User did not respond to the question. Taking option \", round((dim(options)[1] + 0.1) \/ 2, 0), \" as their response.\")) #here the first response is number 1. below it's 0 which is why we do -1.\n        return (round((dim(options)[1] + 0.1) \/ 2, 0) - 1) #do rounding because there might be an odd number of responses. R rounding takes 0.5 down to 0, so add 0.1 so that it's 0.6 and goes up to 1.\n      } else if (option$value == response) { #have we found the correct response option?\n        return (i - 1) #i - 1 because catR wants the responses to start from 0. \n      }\n    }\n\n    stop(\"User's response did not match any of the options in the database\")\n\n  } else {\n    stop(\"Question does not have any response options\")\n  }\n\n}\n\nshouldStop = function(response, sem, out, questions) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(TRUE) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  print(sr_accuracy)\n  print(sr_accuracy$enabled)\n  print(as.numeric(sr_accuracy$accuracy))\n  print(sem)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, theta, sem) {\n  table = \"default_polycat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  data_set_id_column = \"data_set_id\"\n  data_set_id = rb$data_set_id\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    theta_column = rb$custom_table$columns$theta\n    sem_column = rb$custom_table$columns$sem\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{theta_column}}, {{sem_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{theta}}, {{sem}}, '{{data_set_id}}')\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem,\n    data_set_id_column=data_set_id_column,\n    data_set_id=data_set_id\n  ))\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = concerto.template.join(templateId=\"test_item_debug\",params=list(id=question$id))\n  content = paste0(debug, content)\n  return(content)\n}\n\n# nasty function used by getParamBank to unlist the parameters from the questions storage.\nunlistParameters = function(questions) {\n\n  param_bank = NULL\n  maxresponses = 0\n\n  #find the max number of responses (there must be an easier way to do it that doesn't involve going through each item one at a time.\n  for (i in 1:nrow(questions)) {  \n    p = questions[i,]$response_options\n\n    if(is.character(p)) { \n      p = fromJSON(p)\n    }\n\n    if (maxresponses < length(p)) {\n      maxresponses = length(p)\n    } \n  }\n\n  param_bank = matrix(NA, ncol=maxresponses, nrow=nrow(questions)) #set up empty matrix with max cols defined by max response options, and nrow defined by number of questions\n\n  for (i in 1:nrow(questions)) {   \n    p = questions[i,]$response_options\n\n    if(is.character(p)) { \n      p = fromJSON(p)\n    }\n\n    for(j in 1:length(p)) {\n      param_bank[i,j] = p[[j]]$irt_parameter #puts each parameter into the matrix one at a time.\n    } \n\n  }   \n\n  param_bank = apply(param_bank, 2, function (x) { as.numeric(x) } ) #make it numeric\n\n  param_bank = param_bank[,-1] #get rid of first column which should just be NAs.\n\n  return(param_bank)\n\n}\n\n#look for any obvious mistakes in the parameter bank and give out warnings.\ncheckParamBank = function (poly_model, param_bank, questions) {\n  print(\"Parameter bank:\")\n  print(param_bank)\n\n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    # look for any missing discriminations\n    missed = which(is.na(param_bank[,1]))\n    missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n    if (length(missing_ids) > 0) {\n      print(paste0(c(\"Warning: The following item ids do not have a discrimination parameter set, as required by your model, and therefore will only be used if there are no other valid items:\", missing_ids, \". See the parameter bank above; the first column contains the discrimination parameter.\"), collapse=\" \"))\n    }\n  }\n\n  if (poly_model == \"GRM\" | poly_model == \"GPCM\") {\n    diffcol = 2\n  } else {\n    diffcol = 1\n  }\n\n  #look for missing difficulty parameters from first column (i.e. it will only find a problem if the first column is missing)\n  missed = which(is.na(param_bank[,diffcol]))\n  missing_ids = questions[missed,which(colnames(questions) == \"id\")]\n  if (length(missing_ids) > 0) {\n    stop(paste0(c(\"The following item ids are missing a difficulty parameter for the first response option:\", missing_ids, \". See the parameter bank above.\"), collapse=\" \")) \n  }\n  return(TRUE)\n}\n\n#gets the parameter bank. Based on the type of model there are different parameters.\ngetParamBank = function(poly_model, questions) {\n  print(\"getParamBank\")\n  #print(questions)\n  #print(questions[1,]$response_options)\n  #print(poly_model)\n\n\n\n  if (poly_model == \"PCM\") { #PCM has just the parameters based on number of response options - 1.\n\n    param_bank = unlistParameters(questions)\n\n  } else if (poly_model == \"GRM\") { #GRM has the same parameters as response options, but one of them is discrimination.\n    param_bank = unlistParameters(questions)\n\n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n\n  } else if (poly_model == \"GPCM\") { #GPCM has the same parameters as response options, but one of them is discrimination.\n\n    #add the column of discriminations    \n    discrims = questions[,which(colnames(questions)==\"irt_discrimination\")]\n    param_bank = cbind(as.numeric(discrims), param_bank)\n\n  }\n  checkParamBank(poly_model, param_bank, questions)\n\n  return(param_bank)\n}\n\nupdateSavedState = function(questions, theta, sem, out, time_limit, response_vector, current_item){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$polyCAT)) {\n    concerto$promoted$.savedState$polyCAT <<- list()\n  }\n  \n  concerto$promoted$.savedState$polyCAT$questions <<- questions\n  concerto$promoted$.savedState$polyCAT$theta <<- theta\n  concerto$promoted$.savedState$polyCAT$sem <<- sem\n  concerto$promoted$.savedState$polyCAT$out <<- out\n  concerto$promoted$.savedState$polyCAT$time_limit <<- time_limit\n  concerto$promoted$.savedState$polyCAT$response_vector <<- response_vector\n  concerto$promoted$.savedState$polyCAT$current_item <<- current_item\n}\n\nsr_time = fromJSON(stopping_time)\nresumed = F\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$polyCAT)) {\n  resumed = T\n  \n  questions = concerto$promoted$.savedState$polyCAT$questions\n  theta = concerto$promoted$.savedState$polyCAT$theta\n  sem = concerto$promoted$.savedState$polyCAT$sem\n  out = concerto$promoted$.savedState$polyCAT$out\n  time_limit = concerto$promoted$.savedState$polyCAT$time_limit\n  response_vector = concerto$promoted$.savedState$polyCAT$response_vector\n  current_item = concerto$promoted$.savedState$polyCAT$current_item\n} else {\n  questions = getQuestions()\n  theta = 0\n  sem = 1\n  out = NULL\n  time_limit = 0\n  if(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { time_limit = as.numeric(sr_time$time_limit) }\n  response_vector = c()\n  current_item = 1\n}\n\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\n\nparam_bank = getParamBank(poly_model, questions)\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\ntimer_set = FALSE\nif(time_limit > 0) { timer_set = TRUE }\nbuttons = concerto.template.join(templateId=\"buttons_single\",params=list(label=button_label))\n\nif(item_debug == \"0\" && !resumed) { \n  current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n}\nwhile(T) {\n  question = questions[current_item,]\n  content = getContent(question)\n\n  if(item_debug == \"0\") {\n    updateSavedState(questions, theta, sem, out, time_limit, response_vector, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = \"\"\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      #correct = 0\n      #if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      response_vector = c(response_vector, getResponseNumber(response$response))\n      out = c(out, current_item)\n      print(paste0(\"out = \", out))\n      \n      if(!is.null(question$enemy_items) && question$enemy_items != \"\") {\n        enemy_items = as.numeric(strsplit(question$enemy_items, \",\")[[1]])\n        for(i in 1:length(enemy_items)) {\n          for(j in 1:(dim(questions)[1])) {\n\t\t\tif(questions[j,\"id\"] == enemy_items[i]) {\n              out = c(out, j)\n              break\n            }\n          }\n        }\n      }\n      \n      print(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F))\n      theta <- thetaEst(matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"theta = \", theta))\n      sem <- semTheta(theta, matrix(param_bank[out,], ncol=ncol(param_bank), byrow=F), response_vector, model = poly_model, method=scoring_method)\n      print(paste0(\"sem = \", sem))\n      saveResponse(response, question, rb, theta, sem)\n      if(shouldStop(response, sem, out, questions)) {\n        if(response$isTimeout == \"1\") {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(timer_set && sr_time$type == \"item\") {\n          time_limit = as.numeric(sr_time$time_limit)\n        }\n        current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, model=poly_model, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    updateSavedState(questions, theta, sem, out, time_limit, response_vector, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)\nconcerto$promoted$.savedState$polyCAT <<- NULL",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 434,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 34,
                    "parentVariable": 329
                },
                {
                    "class_name": "TestVariable",
                    "id": 435,
                    "name": "paragraph",
                    "type": 0,
                    "description": "<p>polyCAT page paragraph<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "<p>Please answer questions below:<\/p>\n",
                    "test": 34,
                    "parentVariable": 330
                },
                {
                    "class_name": "TestVariable",
                    "id": 436,
                    "name": "button_label",
                    "type": 0,
                    "description": "<p>CAT page continue button label<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "continue",
                    "test": 34,
                    "parentVariable": 331
                },
                {
                    "class_name": "TestVariable",
                    "id": 437,
                    "name": "item_bank",
                    "type": 0,
                    "description": "<p>polyCAT item bank definition.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"table_type\":\"direct\",\"direct_table\":[{\"id\":\"1\",\"question\":\"<p>If I see someone I know well on the street, I say hello.<\/p>\\n\",\"response_options\":[{\"value\":\"1\",\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"-3\"},{\"value\":\"2\",\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"-2.6\"},{\"value\":\"3\",\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"-2.2\"},{\"value\":\"4\",\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"-1.8\"},{\"value\":\"5\",\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"-1.4\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\",\"data_set_id\":\"\",\"enemy_items\":\"\"},{\"id\":\"2\",\"question\":\"<p>I like parties<\/p>\\n\",\"response_options\":[{\"value\":1,\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"-1\"},{\"value\":2,\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"-0.6\"},{\"value\":3,\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"0\"},{\"value\":4,\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"0.6\"},{\"value\":5,\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"1\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\",\"data_set_id\":\"\",\"enemy_items\":\"\"},{\"id\":\"3\",\"question\":\"<p>I despise being alone even for one minute<\/p>\\n\",\"response_options\":[{\"value\":1,\"label\":\"<p>Strongly disagree<\/p>\\n\",\"irt_parameter\":\"1.4\"},{\"value\":2,\"label\":\"<p>Disagree<\/p>\\n\",\"irt_parameter\":\"1.8\"},{\"value\":3,\"label\":\"<p>Neutral<\/p>\\n\",\"irt_parameter\":\"2.2\"},{\"value\":4,\"label\":\"<p>Agree<\/p>\\n\",\"irt_parameter\":\"2.6\"},{\"value\":5,\"label\":\"<p>Strongly agree<\/p>\\n\",\"irt_parameter\":\"3\"}],\"irt_discrimination\":\"\",\"cb_group\":\"\",\"data_set_id\":\"\",\"enemy_items\":\"\"}],\"custom_table\":{},\"custom_question_column\":[],\"custom_response_options_column\":[],\"custom_discrimination_column\":[],\"custom_test_id_column\":[],\"custom_cb_group_column\":[],\"custom_irt_discrimination_column\":[],\"data_set_id\":\"\"}",
                    "test": 34,
                    "parentVariable": 332
                },
                {
                    "class_name": "TestVariable",
                    "id": 438,
                    "name": "response_bank",
                    "type": 0,
                    "description": "<p>Response bank definition<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"table_type\":\"default\",\"custom_table\":[],\"custom_item_id_column\":[],\"custom_response_column\":[],\"custom_time_taken_column\":[],\"custom_session_id_column\":[],\"custom_theta_column\":[],\"custom_sem_column\":[],\"data_set_id\":\"\"}",
                    "test": 34,
                    "parentVariable": 333
                },
                {
                    "class_name": "TestVariable",
                    "id": 439,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "<p>Time-based stopping rule that will stop the test when the specified number of seconds has passed<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"type\":\"\",\"time_limit\":null}",
                    "test": 34,
                    "parentVariable": 334
                },
                {
                    "class_name": "TestVariable",
                    "id": 440,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "<p>Item count-based stopping rule that will stop the test after the specified number of items is answered<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"count\":null}",
                    "test": 34,
                    "parentVariable": 335
                },
                {
                    "class_name": "TestVariable",
                    "id": 441,
                    "name": "stopping_accuracy",
                    "type": 0,
                    "description": "<p>Accuracy-based stopping rule in SEM units that will stop the test when at least certain accuracy is reached<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"accuracy\":null}",
                    "test": 34,
                    "parentVariable": 336
                },
                {
                    "class_name": "TestVariable",
                    "id": 442,
                    "name": "scoring_method",
                    "type": 0,
                    "description": "<p>Ability estimator<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "BM",
                    "test": 34,
                    "parentVariable": 337
                },
                {
                    "class_name": "TestVariable",
                    "id": 443,
                    "name": "next_item_criterion",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "MFI",
                    "test": 34,
                    "parentVariable": 338
                },
                {
                    "class_name": "TestVariable",
                    "id": 444,
                    "name": "randomesque",
                    "type": 0,
                    "description": "<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "1",
                    "test": 34,
                    "parentVariable": 339
                },
                {
                    "class_name": "TestVariable",
                    "id": 445,
                    "name": "randomize_response_options",
                    "type": 0,
                    "description": "<p>Check if you want order of response options to be random<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 34,
                    "parentVariable": 340
                },
                {
                    "class_name": "TestVariable",
                    "id": 446,
                    "name": "no_answer_alert",
                    "type": 0,
                    "description": "<p>Alert message that will appear when no answer is given<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "No answer given!",
                    "test": 34,
                    "parentVariable": 341
                },
                {
                    "class_name": "TestVariable",
                    "id": 447,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 34,
                    "parentVariable": 342
                },
                {
                    "class_name": "TestVariable",
                    "id": 448,
                    "name": "score",
                    "type": 1,
                    "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 34,
                    "parentVariable": 343
                },
                {
                    "class_name": "TestVariable",
                    "id": 449,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 34,
                    "parentVariable": 344
                },
                {
                    "class_name": "TestVariable",
                    "id": 450,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 34,
                    "parentVariable": 345
                },
                {
                    "class_name": "TestVariable",
                    "id": 451,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 34,
                    "parentVariable": 346
                },
                {
                    "class_name": "TestVariable",
                    "id": 452,
                    "name": "cb",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "{\"enabled\":\"0\",\"props\":[]}",
                    "test": 34,
                    "parentVariable": 347
                },
                {
                    "class_name": "TestVariable",
                    "id": 453,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "DEMO TEST",
                    "test": 34,
                    "parentVariable": 348
                },
                {
                    "class_name": "TestVariable",
                    "id": 454,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 34,
                    "parentVariable": 349
                },
                {
                    "class_name": "TestVariable",
                    "id": 455,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 34,
                    "parentVariable": 350
                },
                {
                    "class_name": "TestVariable",
                    "id": 456,
                    "name": "poly_model",
                    "type": 0,
                    "description": "<p>The&nbsp;Polytomous IRT Model that has produced the item parameters.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "PCM",
                    "test": 34,
                    "parentVariable": 351
                },
                {
                    "class_name": "TestVariable",
                    "id": 457,
                    "name": "polyCAT_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "polyCAT_content",
                    "test": 34,
                    "parentVariable": 352
                },
                {
                    "class_name": "TestVariable",
                    "id": 458,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "test_item_debug",
                    "test": 34,
                    "parentVariable": 353
                },
                {
                    "class_name": "TestVariable",
                    "id": 459,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "buttons_single",
                    "test": 34,
                    "parentVariable": 354
                }
            ],
            "sourceWizard": 11,
            "sourceWizardName": "polyCAT",
            "sourceWizardTest": 25,
            "sourceWizardTestName": "source_polyCAT",
            "updatedOn": "2018-05-16 18:17:11",
            "updatedBy": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "_concerto_core",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "804adffc3d59a8566069a51902ff140ca4332243"
        },
        {
            "class_name": "ViewTemplate",
            "id": 13,
            "name": "polyCAT_content",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": ".polyCAT-response-table {\n  border: 0 none;\n  width: 100%;\n  table-layout: fixed;\n}\n.polyCAT-response-table td {\n  padding: 0 5px 0 0;\n}\n.polyCAT-response-button-cell {\n  text-align: center;\n}\n.polyCAT-header-cell {\n  text-align: center;\n  background-color: #b9d979;\n  font-weight: 500; \n}",
            "js": "testRunner.controllerProvider.register(\"polyCAT\", function($scope) {\n  $scope.responseOptions = {{options}};\n})",
            "html": "{{paragraph}}\n<p class=\"polyCat-question\">{{question}}<\/p>\n<table class=\"polyCAT-response-table\" ng-controller=\"polyCAT\">\n\t<tbody>\n\t\t<tr>\n\t\t\t<th class=\"polyCAT-header-cell\" ng-bind-html=\"option.label\" ng-repeat=\"option in responseOptions track by $index\">&nbsp;<\/th>\n\t\t<\/tr>\n\t\t<tr>\n\t\t\t<td class=\"polyCAT-response-button-cell\" ng-repeat=\"option in responseOptions track by $index\"><input id=\"input_response_[[$index+1]]\" name=\"response\" type=\"radio\" value=\"[[option.value]]\" \/><\/td>\n\t\t<\/tr>\n\t<\/tbody>\n<\/table>\n",
            "updatedOn": "2018-05-16 18:17:09",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "8d1374669f77e99f6dcac7fb71cc72fd4968962d"
        },
        {
            "class_name": "ViewTemplate",
            "id": 3,
            "name": "test_item_debug",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": "",
            "js": "",
            "html": "<div class=\"debug\">\n<p>Current item id: #{{id}}<\/p>\n\n<p>Next item id: <input name=\"item_debug\" type=\"text\" \/><\/p>\n<\/div>\n",
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "55597daa2df13bf2d80f0be7acc06ea69fac2723"
        },
        {
            "class_name": "ViewTemplate",
            "id": 1,
            "name": "buttons_single",
            "description": "",
            "accessibility": 2,
            "archived": "0",
            "head": "",
            "css": ".button-group {\n  width: 100%;\n  display: table;\n  table-layout: fixed;\n}\n.button-group ul {\n  display: table-row;\n}\n.button-group button {\n  background-color: #b9d979;\n  border: 0 none;\n  color: #000000;\n  font-family: \"Roboto\";\n  font-size: 1.1em;\n  font-style: normal;\n  font-weight: 500;\n  padding: 7px;\n  width: 150px;\n  cursor: pointer;\n}\n.button-group li {\n  display: table-cell;\n  text-align: center;\n  padding: 5px;\n}",
            "js": "",
            "html": "<div class=\"button-group\">\n<ul>\n\t<li><button name=\"button\">{{label}}<\/button><\/li>\n<\/ul>\n<\/div>\n",
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "5d3e8f4c88166a1e64eebbb47c49aa855b408350"
        }
    ]
}