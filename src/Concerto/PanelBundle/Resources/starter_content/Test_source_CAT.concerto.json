{
    "version": "5.0.beta.5.3",
    "collection": [
        {
            "class_name": "Test",
            "id": 9,
            "name": "source_CAT",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "library(catR)\n\nif(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\nif(is.null(test_time_limit_offset) || is.na(test_time_limit_offset)) { test_time_limit_offset = 0 }\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"custom\") {\n    data_set_id = ib$data_set_id\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    a_column = ib$custom_table$columns$a\n    b_column = ib$custom_table$columns$b\n    c_column = ib$custom_table$columns$c\n    d_column = ib$custom_table$columns$d\n    correct_column = ib$custom_table$columns$correct\n    data_set_id_column = ib$custom_table$columns$data_set_id\n    cb_group_column = ib$custom_table$columns$cb_group\n    fixed_index_column = ib$custom_table$columns$fixed_index\n    questions = concerto.table.query(\"\nSELECT \nid, \n{{question_column}} AS question, \n{{response_options_column}} AS response_options,\n{{a_column}} AS a,\n{{b_column}} AS b,\n{{c_column}} AS c,\n{{d_column}} AS d,\n{{correct_column}} AS correct,\n{{cb_group_column}} AS cb_group,\n{{fixed_index_column}} AS fixed_index\nFROM {{table}} \nWHERE {{data_set_id_column}} = '{{data_set_id}}'\n\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      a_column=a_column,\n      b_column=b_column,\n      c_column=c_column,\n      d_column=d_column,\n      correct_column=correct_column,\n      cb_group_column=cb_group_column,\n      table=table,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id)),\n  \t  fixed_index_column=fixed_index_column\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\ngetContent = function(question) {\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  options = c()\n\n  if(length(o) > 0) {\n    if(randomize_response_options == \"1\") {\n      options = o[sample(1:length(o))]\n    } else {\n      options = o\n    }\n  }\n  question$response_options = options;\n  question$correct = NULL\n  \n  params = list(\n    paragraph = paragraph,\n    question = question,\n    response_styles = paste0(\"width: \",response_width)\n  )\n  content = concerto.template.join(templateId=CAT_template,params=params)\n\n  return(list(content=content,params=params))\n}\n\nshouldStop = function(response, sem, out, questions, test_time_limited, test_time_limit, test_time_left, item_time_limited, item_time_limit, item_time_left, timeout_when_not_full_item_time) {\n  #run out of test time\n  if(test_time_limited && test_time_left <= 0) { return(3) }\n  if(timeout_when_not_full_item_time && test_time_limited && item_time_limited && test_time_left < item_time_limit) { return(3) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(1) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(2) }\n  return(0)\n}\n\n#returns response insert id\nsaveResponse = function(response, question, rb, theta, sem, correct) {\n  if(is.null(rb$table_type)) {\n    return(NULL)\n  }\n\n  table = \"default_cat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  data_set_id_column = \"data_set_id\"\n  data_set_id = rb$data_set_id\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    correct_column = rb$custom_table$columns$correct\n    theta_column = rb$custom_table$columns$theta\n    sem_column = rb$custom_table$columns$sem\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{correct_column}}, {{theta_column}}, {{sem_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{correct}}, {{theta}}, {{sem}}, '{{data_set_id}}')\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    correct_column=correct_column,\n    correct=correct,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem,\n    data_set_id_column=data_set_id_column,\n    data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id))\n  ))\n  return(concerto.table.lastInsertId())\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  \n  debug = concerto.template.join(templateId=item_debug_template,params=list(id=question$id))\n  content = paste0(debug, content)\n  return(list(content=content,params=params))\n}\n\nupdateSavedState = function(questions, theta, sem, out, test_time_left, item_time_left, correctness, current_item, time_taken){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$CAT)) {\n    concerto$promoted$.savedState$CAT <<- list()\n  }\n\n  concerto$promoted$.savedState$CAT$questions <<- questions\n  concerto$promoted$.savedState$CAT$theta <<- theta\n  concerto$promoted$.savedState$CAT$sem <<- sem\n  concerto$promoted$.savedState$CAT$out <<- out\n  concerto$promoted$.savedState$CAT$test_time_left <<- test_time_left\n  concerto$promoted$.savedState$CAT$item_time_left <<- item_time_left\n  concerto$promoted$.savedState$CAT$time_taken <<- time_taken\n  concerto$promoted$.savedState$CAT$correctness <<- correctness\n  concerto$promoted$.savedState$CAT$current_item <<- current_item\n}\n\ngetNextItemIndex = function(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions) {\n  current_index = length(out) + 1\n  questions_num = dim(questions)[1]\n  if(questions_num > 0) {\n    for(i in 1:questions_num) {\n      fixed_index = questions[i,\"fixed_index\"]\n      if(!is.na(fixed_index) && !is.null(fixed_index) && fixed_index != \"\"){\n        if(fixed_index == current_index) {\n          return(i)\n        } else {\n          out = unique(c(out, i))\n        }\n      }\n    }\n  }\n  return(nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item)\n}\n\nsr_time = fromJSON(stopping_time)\ntest_time_limited = F\ntest_time_limit = 0\ntest_time_left = 0\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"both\") && as.numeric(sr_time$test_time_limit) > 0) {\n  test_time_limited = T\n  test_time_limit = as.numeric(sr_time$test_time_limit) + as.numeric(test_time_limit_offset)\n  test_time_left = test_time_limit\n}\nitem_time_limited = F\nitem_time_limit = 0\nitem_time_left = 0\ntimeout_when_not_full_item_time = F\nif(!is.null(sr_time$type) && (sr_time$type == \"item\" || sr_time$type == \"both\") && as.numeric(sr_time$item_time_limit) > 0) {\n  item_time_limited = T\n  item_time_limit = as.numeric(sr_time$item_time_limit)\n  item_time_left = item_time_limit\n  timeout_when_not_full_item_time = sr_time$timeout_when_not_full_item_time == \"1\"\n}\n\nresumed = F\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$CAT)) {\n  resumed = T\n\n  questions = concerto$promoted$.savedState$CAT$questions\n  theta = concerto$promoted$.savedState$CAT$theta\n  sem = concerto$promoted$.savedState$CAT$sem\n  out = concerto$promoted$.savedState$CAT$out\n  test_time_left = concerto$promoted$.savedState$CAT$test_time_left\n  item_time_left = concerto$promoted$.savedState$CAT$item_time_left\n  time_taken = concerto$promoted$.savedState$CAT$time_taken\n  correctness = concerto$promoted$.savedState$CAT$correctness\n  current_item = concerto$promoted$.savedState$CAT$current_item\n} else {\n  questions = getQuestions()\n  theta = as.numeric(starting_theta)\n  sem = 1\n  out = NULL\n  correctness = c()\n  current_item = 1\n  time_taken = 0\n}\n\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = questions[,c(\"a\",\"b\",\"c\",\"d\"),drop=F]\nparam_bank = apply(param_bank, 2, as.numeric)\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\nbuttons = \"\"\nif(!is.na(buttons_template) && !is.null(buttons_template) && buttons_template != \"\") {\n  buttons = concerto.template.join(templateId=buttons_template,params=list(label=button_label))\n}\n\nif(item_debug == \"0\" && !resumed && dim(questions)[1] > 1) { \n  #next item processor\n  if(!is.null(next_item_processor) && !is.na(next_item_processor) && next_item_processor != \"\") {\n    current_item = concerto.test.run(next_item_processor, params=list(\n      questions=questions,\n      template_response=response,\n      theta=theta,\n      sem=sem,\n      out=out,\n      next_item_criterion=next_item_criterion,\n      scoring_method=scoring_method,\n      randomesque=randomesque,\n      cb_group=cb_group,\n      cb_control=cb_control\n    ))$next_item\n  } else {\n    current_item = getNextItemIndex(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions)\n  }\n}\n\nwhile(T) {\n  question = as.list(questions[current_item,])\n  content = getContent(question)\n\n  time_limit = 0\n  if(test_time_limited || item_time_limited) {\n    if(test_time_limited) {\n      time_limit = test_time_left\n    }\n    if(item_time_limited && item_time_left < test_time_left) {\n      time_limit = item_time_left\n    }\n  }\n\n  updateSavedState(questions, theta, sem, out, test_time_left, item_time_left, correctness, current_item, time_taken)\n  if(item_debug == \"0\") {\n    params = list()\n    if(!is.null(inserts) && is.list(inserts)) {\n      params = inserts\n    }\n    params = append(params, content$params)\n    params = append(params, list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content$content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))\n    if(!is.null(content_params_processor) && !is.na(content_params_processor) && content_params_processor != \"\") {\n      params = concerto.test.run(content_params_processor, params=list(\n        question=question,\n        params=params\n      ))$params\n    }\n    \n    response = concerto.template.show(decoded_template_def$layout, params=params, timeLimit=time_limit)\n    warning_msg = \"\"\n\n    time_taken = time_taken + as.numeric(response$timeTaken)\n    if(test_time_limited) {\n      test_time_left = test_time_left - as.numeric(response$timeTaken)\n      if(response$isTimeout == \"1\") test_time_left = 0\n    }\n    if(item_time_limited) {\n      item_time_left = item_time_left - as.numeric(response$timeTaken)\n      if(response$isTimeout == \"1\") item_time_left = 0\n    }\n\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      correct = 0\n      if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      correctness = c(correctness, correct)\n      out = c(out, current_item)\n      param_bank_out = param_bank\n      if(dim(questions)[1] > 1) {\n        param_bank_out = param_bank[out,]\n      }\n      print(\"theta\")\n      print(param_bank_out)\n      theta <- thetaEst(matrix(param_bank_out, ncol=4, byrow=F), correctness, method=scoring_method)\n      print(\"sem\")\n      sem <- semTheta(theta, matrix(param_bank_out, ncol=4, byrow=F), correctness)\n      print(\"response\")\n      response_id=saveResponse(response, question, rb, theta, sem, correct)\n\n      #response processor\n      if(!is.null(response_processor) && !is.na(response_processor) && response_processor != \"\") {\n        concerto.test.run(response_processor, params=list(\n          question=question,\n          template_response=response,\n          response_id=response_id,\n          response_bank=rb,\n          theta=theta,\n          sem=sem,\n          correct=correct,\n          session=session\n        ))\n      }\n\n      stopReason = shouldStop(response, sem, out, questions, test_time_limited, test_time_limit, test_time_left, item_time_limited, item_time_limit, item_time_left, timeout_when_not_full_item_time)\n      if(stopReason) {\n        #out of time\n        if(stopReason == 3) {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(item_time_limited) {\n          item_time_left = item_time_limit\n        }\n\n        #next item processor\n        if(!is.null(next_item_processor) && !is.na(next_item_processor) && next_item_processor != \"\") {\n          current_item = concerto.test.run(next_item_processor, params=list(\n            questions=questions,\n            template_response=response,\n            theta=theta,\n            sem=sem,\n            out=out,\n            next_item_criterion=next_item_criterion,\n            scoring_method=scoring_method,\n            randomesque=randomesque,\n            cb_group=cb_group,\n            cb_control=cb_control\n          ))$next_item\n        } else {\n          current_item = getNextItemIndex(param_bank, theta, out, next_item_criterion, scoring_method, randomesque, cb_group, cb_control, questions)\n        }\n\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    \n    params = list()\n    if(!is.null(inserts) && is.list(inserts)) {\n      params = inserts\n    }\n    params = append(params, content$params)\n    params = append(params, list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content$content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))\n    \n    response = concerto.template.show(decoded_template_def$layout, params=params)\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)\nconcerto$promoted$.savedState$CAT <<- NULL\ntime_left = 0\nif(test_time_limited) {\n  time_left = test_time_left\n}",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 159,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 160,
                    "name": "paragraph",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 161,
                    "name": "button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 162,
                    "name": "item_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 163,
                    "name": "response_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 164,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 165,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 166,
                    "name": "stopping_accuracy",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 167,
                    "name": "scoring_method",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 168,
                    "name": "next_item_criterion",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 169,
                    "name": "randomesque",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 170,
                    "name": "randomize_response_options",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 171,
                    "name": "no_answer_alert",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 172,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 173,
                    "name": "score",
                    "type": 1,
                    "description": "<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 174,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 175,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 176,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 177,
                    "name": "cb",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 178,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 179,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 180,
                    "name": "responses_layout",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 181,
                    "name": "response_width",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 182,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 183,
                    "name": "CAT_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 184,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 185,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 186,
                    "name": "response_processor",
                    "type": 0,
                    "description": "<p>A subtest to run to process user response after it has been saved to response table.<\/p>\n\n<pre>\nconcerto.test.run({{response_processor}}, params=list(\n\tquestion={{question}},\n\ttemplate_response={{template_response}},\n\tresponse_bank={{response_bank}},\n\tresponse_id={{response_id}},\n\ttheta={{theta}},\n\tsem={{sem}},\n\tcorrect={{correct}},\n\tsession={{session}}\n))<\/pre>\n",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 187,
                    "name": "time_taken",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 188,
                    "name": "time_left",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 189,
                    "name": "test_time_limit_offset",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 190,
                    "name": "next_item_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 191,
                    "name": "content_params_processor",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 9,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 510,
                    "name": "starting_theta",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 9,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2018-05-17 18:23:19",
            "updatedBy": "admin",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "b3d28a61e5ccbff622fabb6355c7c8cb31a70aeb"
        }
    ]
}