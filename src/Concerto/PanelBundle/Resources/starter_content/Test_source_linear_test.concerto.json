{
    "version": "5.0.beta.5.3",
    "collection": [
        {
            "class_name": "Test",
            "id": 4,
            "name": "source_linear_test",
            "accessibility": 2,
            "archived": "0",
            "visibility": 2,
            "type": 0,
            "code": "if(is.null(template_def) || is.na(template_def) || template_def == \"\") {\n  decoded_template_def = fromJSON(concerto.var.get(\"template_def\"))\n} else {\n  decoded_template_def = fromJSON(template_def)\n}\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  print(ib)\n  if(ib$table_type == \"custom\") {\n    data_set_id = ib$data_set_id\n    table = ib$custom_table$table\n    question_column = ib$custom_table$columns$question\n    response_options_column = ib$custom_table$columns$response_options\n    trait_column = ib$custom_table$columns$trait\n    order_column = ib$custom_table$columns$order_index\n    data_set_id_column = ib$custom_table$columns$data_set_id\n\n    questions = concerto.table.query(\"SELECT id, {{question_column}} AS question, {{response_options_column}} AS response_options, {{trait_column}} AS trait FROM {{table}} WHERE {{data_set_id_column}} = '{{data_set_id}}' ORDER BY {{order_column}} ASC\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      trait_column=trait_column,\n      order_column=order_column,\n      table=table,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(data_set_id))\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        ib$direct_table[[i]]$response_options = as.character(toJSON(ib$direct_table[[i]]$response_options)) #response options don't fit into flat table, so turn them back to JSON.\n        questions = rbind(questions, data.frame(ib$direct_table[[i]], stringsAsFactors=F))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  print(questions)\n\n  return(questions)\n}\n\ngetContent = function(question, current_item, answers) {\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  options = NULL\n  response_classes = \"\"\n  response_styles = \"\"\n  if(o$response_type == \"multiple_choice\") {\n    #response options\n    if(randomized_response_options == \"1\") {\n      options = o$response_options[sample(1:length(o$response_options))]\n    } else {\n      options = o$response_options\n    }\n    for(i in 1:length(options)) {\n      options[[i]]$points = NULL\n    }\n    \n    response_classes = \"linear-test-response-section-vertical\"\n    response_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      response_classes = \"linear-test-response-section-horizontal\" \n      response_styles = paste0(\"width: \",response_width)\n    }\n  }\n  \n  content = concerto.template.join(templateId=linear_test_template,params=list(\n    paragraph = paragraph,\n    question = question$question,\n    response_type = o$response_type,\n    response_options = toJSON(options),\n    answers = toJSON(answers),\n    current_item = current_item,\n    response_classes = response_classes,\n    response_styles = response_styles\n  ))\n\n  return(content)\n}\n\nshouldStop = function(response, answers, questions, current_item, next_item) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n\n  if((sr_count$enabled == \"1\" && current_item >= as.numeric(sr_count$count)) || next_item > dim(questions)[1]) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, correct, scores, correctness, current_item) {\n  if(is.null(response$response)) { return(scores) }\n\n  table = \"default_linear_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  trait_column = \"trait\"\n  data_set_id_column = \"data_set_id\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table$table\n    item_id_column = rb$custom_table$columns$item_id\n    response_column = rb$custom_table$columns$response\n    time_taken_column = rb$custom_table$columns$time_taken\n    session_id_column = rb$custom_table$columns$session_id\n    correct_column = rb$custom_table$columns$correct\n    trait_column = rb$custom_table$columns$trait\n    data_set_id_column = rb$custom_table$columns$data_set_id\n  }\n  session_id = 0\n  if(!is.null(session) && is.list(session)) {\n    session_id = session$id\n  } else {\n    session_id = paste0(\"i\",concerto$session$id)\n  }\n\n  r = concerto.table.query(\"SELECT id FROM {{table}} WHERE {{item_id_column}}={{item_id}} AND {{session_id_column}}='{{session_id}}' AND {{data_set_id_column}}='{{data_set_id}}'\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    data_set_id_column=data_set_id_column,\n    data_set_id=dbEscapeStrings(concerto$connection, toString(rb$data_set_id))\n  ))\n  if(dim(r)[1] > 0) { \n    rid = r[1,\"id\"]\n    concerto.table.query(\"UPDATE {{table}} SET {{response_column}}='{{response}}', {{time_taken_column}}={{time_taken}}, {{correct_column}}={{correct}} WHERE id={{id}}\", list(\n      table=table,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      id=rid\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO {{table}} ({{item_id_column}}, {{response_column}}, {{time_taken_column}}, {{session_id_column}}, {{correct_column}}, {{trait_column}}, {{data_set_id_column}}) VALUES ({{item_id}}, '{{response}}', {{time_taken}}, '{{session_id}}', {{correct}}, '{{trait}}', '{{data_set_id}}')\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      data_set_id_column=data_set_id_column,\n      data_set_id=dbEscapeStrings(concerto$connection, toString(rb$data_set_id))\n    ))\n  }\n\n  if(is.null(scores[[question$trait]])) {\n    scores[[question$trait]] = 0\n  }\n\n  if(!is.null(correctness[current_item]) && !is.na(correctness[current_item])) { \n    prev_correct = correctness[current_item] \n    scores[[question$trait]] = scores[[question$trait]] - prev_correct\n  }\n\n  scores[[question$trait]] = scores[[question$trait]] + correct\n  return(scores)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = concerto.template.join(templateId=item_debug_template,params=list(id=question$id))\n  content = paste0(debug, content)\n  return(content)\n}\n\n#calculate score based on response (e.g. correct\/incorrect, or differing number of points depending on choice)\ncalculateScore = function(response, question) { \n  print(\"calculateScore()\")\n  if (is.character(question$response_options)) {\n    o = fromJSON(question$response_options)\n  }\n\n  if (o$response_type == \"open_text\") {\n    print(\"open text item\")\n    if(response$response == o$correct_answer) { #open text response just needs to match database correct answer\n      print(\"correct\")\n      return(1)\n    } else {\n      print(\"incorrect\")\n      return(0)\n    }\n  } else if (o$response_type == \"multiple_choice\") { #make it go through all the responses, see which one they matched with, and then give them points for the match.\n    print(\"multiple choice item\")\n\n    options = NULL #turn response options into a nice table rather than a list.\n    for(i in 1:length(o$response_options)) {\n      options = rbind(options, as.list(o$response_options[[i]]))\n    }\n\n    for(i in 1:dim(options)[1]) {  \n      if (options[i,]$value == response$response) { #user chose this response option\n        print(\"response led to this many points:\")\n        print(options[i,]$points)\n        return(as.numeric(options[i,]$points)) #so they get this many points\n      }\n    }\n    print(\"Warning: User's response did not match any of the options in the item bank. They have been given 0 points for this response.\")\n    return(0) #no match, so no points\n  } \n  return(F)\n}\n\nupdateSavedState = function(questions, answers, time_limit, scores, correctness, current_item){\n  if(!is.null(concerto$promoted$.savedState)) {\n    concerto$promoted$.savedState <<- list()\n  }\n  if(!is.null(concerto$promoted$.savedState$linear_test)) {\n    concerto$promoted$.savedState$linear_test <<- list()\n  }\n  \n  concerto$promoted$.savedState$linear_test$questions <<- questions\n  concerto$promoted$.savedState$linear_test$answers <<- answers\n  concerto$promoted$.savedState$linear_test$time_limit <<- time_limit\n  concerto$promoted$.savedState$linear_test$scores <<- scores\n  concerto$promoted$.savedState$linear_test$correctness <<- correctness\n  concerto$promoted$.savedState$linear_test$current_item <<- current_item\n}\n\nsr_time = fromJSON(stopping_time)\nif(!is.null(concerto$promoted$.savedState) && !is.null(concerto$promoted$.savedState$linear_test)) {\n  questions = concerto$promoted$.savedState$linear_test$questions\n  answers = concerto$promoted$.savedState$linear_test$answers\n  time_limit = concerto$promoted$.savedState$linear_test$time_limit\n  scores = concerto$promoted$.savedState$linear_test$scores\n  correctness = concerto$promoted$.savedState$linear_test$correctness\n  current_item = concerto$promoted$.savedState$linear_test$current_item\n} else {\n  questions = getQuestions()\n  answers = NULL\n  time_limit = 0\n  if(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { \n    time_limit = as.numeric(sr_time$time_limit) \n  }\n  scores = list()\n  correctness = NULL\n  current_item = 1\n}\n\nrb = fromJSON(response_bank)\nresponse = NULL\nwarning_msg = \"\"\ntimer_set = FALSE\nif(time_limit > 0) { timer_set = TRUE }\nmax_items = dim(questions)[1]\nsr_item_count = fromJSON(stopping_item_count)\nif(sr_item_count$enabled == \"1\") { max_items = min(max_items, as.numeric(sr_item_count$count)) }\n\nwhile(T) {\n  show_previous = \"false\"\n  if(current_item > 1 && can_go_back == \"1\" && item_debug == \"0\") { show_previous = \"true\" }\n  show_pager = \"false\"\n  if(dim(questions)[1] > 1 && item_debug == \"0\") { show_pager = \"true\" }\n  show_next = \"false\"\n  if(current_item <= dim(questions)[1] || item_debug == \"1\") { show_next = \"true\" }\n  buttons = concerto.template.join(templateId=buttons_template, params=list(\n    show_previous=show_previous,\n    show_pager=show_pager,\n    show_next=show_next,\n    current_item=current_item,\n    max_items=max_items,\n    label_previous=previous_button_label,\n    label_next=next_button_label\n  ))\n\n  question = questions[current_item,]\n  content = getContent(question, current_item, answers)\n\n  if(item_debug == \"0\") {\n    updateSavedState(questions, answers, time_limit, scores, correctness, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = \"\"\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n\n    if(!is.null(response$response) || response$isTimeout == \"1\") {\n      correct = 0\n      if(is.null(response$response)) { response$response = \"\" }\n      correct = calculateScore(response, question)\n\n      scores = saveResponse(response, question, rb, correct, scores, correctness, current_item)\n      if(length(answers) < current_item) {\n        answers = c(answers, response$response)\n        correctness = c(correctness, correct)\n      } else {\n        answers[current_item] = response$response\n        correctness[current_item] = correct\n      }\n    }\n\n    prev_item = current_item\n    if(response$buttonPressed == \"next\" || response$isTimeout == \"1\") {\n      if(response_required == \"0\" || (!is.null(response$response) && response$response != \"\") || response$isTimeout == \"1\") {\n        current_item = current_item + 1\n        if(timer_set && sr_time$type == \"item\"){\n          time_limit = as.numeric(sr_time$time_limit) \n        }\n      } else {\n        warning_msg = no_response_alert\n      }\n    }\n    if(response$buttonPressed == \"previous\") {\n      current_item = current_item - 1\n      if(timer_set && sr_time$type == \"item\"){\n        time_limit = as.numeric(sr_time$time_limit) \n      }\n    }\n\n    if(shouldStop(response, answers, questions, prev_item, current_item)) {\n      if(response$isTimeout == \"1\") {\n        .branch = \"out_of_time\"\n      }\n      break\n    }\n  } else {\n    content = getDebugContent(content, question)\n    updateSavedState(questions, answers, time_limit, scores, correctness, current_item)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nrm(questions)\nconcerto$promoted$.savedState$linear_test <<- NULL",
            "outdated": "0",
            "description": "",
            "variables": [
                {
                    "class_name": "TestVariable",
                    "id": 45,
                    "name": "answered",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 46,
                    "name": "paragraph",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 47,
                    "name": "next_button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 48,
                    "name": "previous_button_label",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 49,
                    "name": "item_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 50,
                    "name": "response_bank",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 51,
                    "name": "stopping_time",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 52,
                    "name": "stopping_item_count",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 53,
                    "name": "randomized_response_options",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 54,
                    "name": "order",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 55,
                    "name": "session",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 56,
                    "name": "inserts",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 57,
                    "name": "response_required",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 58,
                    "name": "no_response_alert",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 59,
                    "name": "scores",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 60,
                    "name": "can_go_back",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 61,
                    "name": "item_debug",
                    "type": 0,
                    "description": "<p><span style=\"line-height: 20.8px;\">1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/span><\/p>\n",
                    "passableThroughUrl": "0",
                    "value": "0",
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 62,
                    "name": "out_of_time",
                    "type": 2,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 63,
                    "name": "title",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 64,
                    "name": "template_def",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 65,
                    "name": "responses_layout",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 66,
                    "name": "response_width",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 67,
                    "name": ".branch",
                    "type": 1,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 68,
                    "name": "linear_test_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 69,
                    "name": "item_debug_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                },
                {
                    "class_name": "TestVariable",
                    "id": 70,
                    "name": "buttons_template",
                    "type": 0,
                    "description": "",
                    "passableThroughUrl": "0",
                    "value": null,
                    "test": 4,
                    "parentVariable": null
                }
            ],
            "sourceWizard": null,
            "sourceWizardName": null,
            "sourceWizardTest": null,
            "sourceWizardTestName": null,
            "updatedOn": "2018-05-16 18:17:07",
            "updatedBy": "",
            "nodes": [],
            "nodesConnections": [],
            "tags": "",
            "owner": 1,
            "groups": "",
            "starterContent": true,
            "hash": "2777d30258699025f850933a3383554064b9fc6c"
        }
    ]
}